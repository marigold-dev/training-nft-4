{"mappings":"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","sources":["taqueria-plugin-ligo/index.ts","taqueria-plugin-ligo/createContract.ts","taqueria-plugin-ligo/ligo_templates.ts","taqueria-plugin-ligo/main.ts","taqueria-plugin-ligo/common.ts","taqueria-plugin-ligo/compile.ts","taqueria-plugin-ligo/ligo.ts","taqueria-plugin-ligo/test.ts"],"sourcesContent":["import { Option, Plugin, PositionalArg, Task, Template } from '@taqueria/node-sdk';\nimport createContract from './createContract';\nimport main from './main';\n\nPlugin.create(i18n => ({\n\tschema: '1.0',\n\tversion: '0.1',\n\talias: 'ligo',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'ligo',\n\t\t\tcommand: 'ligo',\n\t\t\tdescription:\n\t\t\t\t'This task allows you to run arbitrary LIGO native commands. Note that they might not benefit from the abstractions provided by Taqueria',\n\t\t\toptions: [\n\t\t\t\tOption.create({\n\t\t\t\t\tshortFlag: 'c',\n\t\t\t\t\tflag: 'command',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'The command to be passed to the underlying LIGO binary, wrapped in quotes',\n\t\t\t\t\trequired: true,\n\t\t\t\t}),\n\t\t\t],\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'none',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'compile',\n\t\t\tcommand: 'compile <sourceFile>',\n\t\t\taliases: ['c', 'compile-ligo'],\n\t\t\tdescription:\n\t\t\t\t'Compile a smart contract written in a LIGO syntax to Michelson code, along with its associated storage/parameter list files if they are found',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'json',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'test',\n\t\t\tcommand: 'test <sourceFile>',\n\t\t\tdescription: 'Test a smart contract written in LIGO',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'json',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'get-image',\n\t\t\tcommand: 'get-image',\n\t\t\tdescription: 'Gets the name of the image to be used',\n\t\t\thandler: 'proxy',\n\t\t\thidden: true,\n\t\t}),\n\t],\n\ttemplates: [\n\t\tTemplate.create({\n\t\t\ttemplate: 'contract',\n\t\t\tcommand: 'contract <sourceFileName>',\n\t\t\tdescription: 'Create a LIGO contract with boilerplate code',\n\t\t\tpositionals: [\n\t\t\t\tPositionalArg.create({\n\t\t\t\t\tplaceholder: 'sourceFileName',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'The name of the LIGO contract to generate',\n\t\t\t\t}),\n\t\t\t],\n\t\t\toptions: [\n\t\t\t\tOption.create({\n\t\t\t\t\tshortFlag: 's',\n\t\t\t\t\tflag: 'syntax',\n\t\t\t\t\ttype: 'string',\n\t\t\t\t\tdescription: 'The syntax used in the contract',\n\t\t\t\t}),\n\t\t\t],\n\t\t\thandler: createContract,\n\t\t}),\n\t],\n\tproxy: main,\n}), process.argv);\n","import { experimental, sendAsyncErr } from '@taqueria/node-sdk';\nimport * as RequestArgs from '@taqueria/protocol/RequestArgs';\nimport { writeFile } from 'fs/promises';\nimport { jsligo_template, mligo_template, pascaligo_template, religo_template } from './ligo_templates';\n\ninterface Opts extends RequestArgs.t {\n\tsourceFileName?: string;\n\tsyntax?: string;\n}\n\nconst registerContract = (arg: Opts, contractName: string) => {\n\texperimental.registerContract(arg, contractName);\n};\n\nconst getLigoTemplate = async (contractName: string, syntax: string | undefined): Promise<string> => {\n\tconst matchResult = contractName.match(/\\.[^.]+$/);\n\tconst ext = matchResult ? matchResult[0].substring(1) : null;\n\n\tif (syntax === 'mligo') return mligo_template;\n\tif (syntax === 'ligo') return pascaligo_template;\n\tif (syntax === 'religo') return religo_template;\n\tif (syntax === 'jsligo') return jsligo_template;\n\n\tif (syntax === undefined) {\n\t\tif (ext === 'mligo') return mligo_template;\n\t\tif (ext === 'ligo') return pascaligo_template;\n\t\tif (ext === 'religo') return religo_template;\n\t\tif (ext === 'jsligo') return jsligo_template;\n\t\treturn sendAsyncErr(\n\t\t\t`Unable to infer LIGO syntax from \"${contractName}\". Please specify a LIGO syntax via the --syntax option`,\n\t\t);\n\t} else {\n\t\treturn sendAsyncErr(`\"${syntax}\" is not a valid syntax. Please specify a valid LIGO syntax`);\n\t}\n};\n\nconst createContract = (arg: Opts) => {\n\tconst contractName = arg.sourceFileName as string;\n\tconst syntax = arg.syntax;\n\tconst contractsDir = `${arg.config.projectDir}/${arg.config.contractsDir}`;\n\treturn getLigoTemplate(contractName, syntax)\n\t\t.then(ligo_template => writeFile(`${contractsDir}/${contractName}`, ligo_template))\n\t\t.then(_ => registerContract(arg, contractName));\n};\n\nexport default createContract;\n","export const mligo_template = `\ntype storage = int\n\ntype parameter =\n  Increment of int\n| Decrement of int\n| Reset\n\ntype return = operation list * storage\n\n// Two entrypoints\n\nlet add (store, delta : storage * int) : storage = store + delta\nlet sub (store, delta : storage * int) : storage = store - delta\n\n(* Main access point that dispatches to the entrypoints according to\n   the smart contract parameter. *)\n   \nlet main (action, store : parameter * storage) : return =\n ([] : operation list),    // No operations\n (match action with\n   Increment (n) -> add (store, n)\n | Decrement (n) -> sub (store, n)\n | Reset         -> 0)\n`;\n\nexport const pascaligo_template = `\ntype storage is int\n\ntype parameter is\n  Increment of int\n| Decrement of int\n| Reset\n\ntype return is list (operation) * storage\n\n// Two entrypoints\n\nfunction add (const store : storage; const delta : int) : storage is \n  store + delta\n\nfunction sub (const store : storage; const delta : int) : storage is \n  store - delta\n\n(* Main access point that dispatches to the entrypoints according to\n   the smart contract parameter. *)\n   \nfunction main (const action : parameter; const store : storage) : return is\n ((nil : list (operation)),    // No operations\n  case action of [\n    Increment (n) -> add (store, n)\n  | Decrement (n) -> sub (store, n)\n  | Reset         -> 0\n  ])\n`;\n\nexport const religo_template = `\ntype storage = int;\n\ntype parameter =\n  Increment (int)\n| Decrement (int)\n| Reset;\n\ntype return = (list (operation), storage);\n\n// Two entrypoints\n\nlet add = ((store, delta) : (storage, int)) : storage => store + delta;\nlet sub = ((store, delta) : (storage, int)) : storage => store - delta;\n\n/* Main access point that dispatches to the entrypoints according to\n   the smart contract parameter. */\n   \nlet main = ((action, store) : (parameter, storage)) : return => {\n (([] : list (operation)),    // No operations\n (switch (action) {\n  | Increment (n) => add ((store, n))\n  | Decrement (n) => sub ((store, n))\n  | Reset         => 0}))\n};\n`;\n\nexport const jsligo_template = `\ntype storage = int;\n\ntype parameter =\n  [\"Increment\", int]\n| [\"Decrement\", int]\n| [\"Reset\"];\n\ntype ret = [list<operation>, storage];\n\n// Two entrypoints\n\nconst add = ([store, delta] : [storage, int]) : storage => store + delta;\nconst sub = ([store, delta] : [storage, int]) : storage => store - delta;\n\n/* Main access point that dispatches to the entrypoints according to\n   the smart contract parameter. */\n\nconst main = ([action, store] : [parameter, storage]) : ret => {\n return [list([]) as list<operation>,    // No operations\n match (action, {\n  Increment:(n: int) => add ([store, n]),\n  Decrement:(n: int) => sub ([store, n]),\n  Reset    :()  => 0})]\n};\n`;\n","import { sendAsyncErr, sendAsyncRes } from '@taqueria/node-sdk';\nimport { getLigoDockerImage, IntersectionOpts as Opts } from './common';\nimport compile from './compile';\nimport ligo from './ligo';\nimport test from './test';\n\nconst main = (parsedArgs: Opts): Promise<void> => {\n\tswitch (parsedArgs.task) {\n\t\tcase 'ligo':\n\t\t\treturn ligo(parsedArgs);\n\t\tcase 'compile':\n\t\t\treturn compile(parsedArgs);\n\t\tcase 'test':\n\t\t\treturn test(parsedArgs);\n\t\tcase 'get-image':\n\t\t\treturn sendAsyncRes(getLigoDockerImage());\n\t\tdefault:\n\t\t\treturn sendAsyncErr(`${parsedArgs.task} is not an understood task by the LIGO plugin`);\n\t}\n};\n\nexport default main;\n","import { getDockerImage, sendErr } from '@taqueria/node-sdk';\nimport { RequestArgs } from '@taqueria/node-sdk/types';\nimport { join } from 'path';\n\nexport interface LigoOpts extends RequestArgs.ProxyRequestArgs {\n\tcommand: string;\n}\n\nexport interface CompileOpts extends RequestArgs.ProxyRequestArgs {\n\tsourceFile: string;\n}\n\nexport interface TestOpts extends RequestArgs.ProxyRequestArgs {\n\tsourceFile: string;\n}\n\nexport type IntersectionOpts = LigoOpts & CompileOpts & TestOpts;\n\ntype UnionOpts = LigoOpts | CompileOpts | TestOpts;\n\n// Should point to the latest stable version, so it needs to be updated as part of our release process.\nconst LIGO_DEFAULT_IMAGE = 'ligolang/ligo:0.54.1';\n\nconst LIGO_IMAGE_ENV_VAR = 'TAQ_LIGO_IMAGE';\n\nexport const getLigoDockerImage = (): string => getDockerImage(LIGO_DEFAULT_IMAGE, LIGO_IMAGE_ENV_VAR);\n\nexport const getInputFilename = (parsedArgs: UnionOpts, sourceFile: string): string =>\n\tjoin(parsedArgs.config.contractsDir, sourceFile);\n\nexport const emitExternalError = (err: unknown, sourceFile: string): void => {\n\tsendErr(`\\n=== For ${sourceFile} ===`);\n\terr instanceof Error ? sendErr(err.message.replace(/Command failed.+?\\n/, '')) : sendErr(err as any);\n};\n","import { execCmd, getArch, sendAsyncErr, sendJsonRes, sendWarn } from '@taqueria/node-sdk';\nimport { access, readFile, writeFile } from 'fs/promises';\nimport { basename, extname, join } from 'path';\nimport { CompileOpts as Opts, emitExternalError, getInputFilename, getLigoDockerImage } from './common';\n\ntype TableRow = { contract: string; artifact: string };\n\ntype ExprKind = 'storage' | 'default_storage' | 'parameter';\n\nconst COMPILE_ERR_MSG: string = 'Not compiled';\n\nconst isStorageKind = (exprKind: ExprKind): boolean => exprKind === 'storage' || exprKind === 'default_storage';\n\nconst isLIGOFile = (sourceFile: string): boolean => /.+\\.(ligo|religo|mligo|jsligo)$/.test(sourceFile);\n\nconst isStorageListFile = (sourceFile: string): boolean =>\n\t/.+\\.(storageList|storages)\\.(ligo|religo|mligo|jsligo)$/.test(sourceFile);\n\nconst isParameterListFile = (sourceFile: string): boolean =>\n\t/.+\\.(parameterList|parameters)\\.(ligo|religo|mligo|jsligo)$/.test(sourceFile);\n\nconst isContractFile = (sourceFile: string): boolean =>\n\tisLIGOFile(sourceFile) && !isStorageListFile(sourceFile) && !isParameterListFile(sourceFile);\n\nconst extractExt = (path: string): string => {\n\tconst matchResult = path.match(/\\.(ligo|religo|mligo|jsligo)$/);\n\treturn matchResult ? matchResult[0] : '';\n};\n\nconst removeExt = (path: string): string => {\n\tconst extRegex = new RegExp(extractExt(path));\n\treturn path.replace(extRegex, '');\n};\n\nconst getOutputFilename = (parsedArgs: Opts, sourceFile: string): string => {\n\tconst outputFile = basename(sourceFile, extname(sourceFile));\n\treturn join(parsedArgs.config.artifactsDir, `${outputFile}.tz`);\n};\n\n// Get the contract name that the storage/parameter file is associated with\n// e.g. If sourceFile is token.storageList.mligo, then it'll return token.mligo\nconst getContractNameForExpr = (sourceFile: string, exprKind: ExprKind): string => {\n\ttry {\n\t\treturn isStorageKind(exprKind)\n\t\t\t? sourceFile.match(/.+(?=\\.(?:storageList|storages)\\.(ligo|religo|mligo|jsligo))/)!.join('.')\n\t\t\t: sourceFile.match(/.+(?=\\.(?:parameterList|parameters)\\.(ligo|religo|mligo|jsligo))/)!.join('.');\n\t} catch (err) {\n\t\tthrow new Error(`Something went wrong internally when dealing with filename format: ${err}`);\n\t}\n};\n\n// If sourceFile is token.storageList.mligo, then it'll return token.storage.{storageName}.tz\nconst getOutputExprFileName = (parsedArgs: Opts, sourceFile: string, exprKind: ExprKind, exprName: string): string => {\n\tconst contractName = basename(getContractNameForExpr(sourceFile, exprKind), extname(sourceFile));\n\tconst outputFile = exprKind === 'default_storage'\n\t\t? `${contractName}.default_storage.tz`\n\t\t: `${contractName}.${exprKind}.${exprName}.tz`;\n\treturn join(parsedArgs.config.artifactsDir, `${outputFile}`);\n};\n\nconst getCompileContractCmd = (parsedArgs: Opts, sourceFile: string): string => {\n\tconst projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;\n\tif (!projectDir) throw `No project directory provided`;\n\tconst baseCmd =\n\t\t`DOCKER_DEFAULT_PLATFORM=linux/amd64 docker run --rm -v \\\"${projectDir}\\\":/project -w /project -u $(id -u):$(id -g) ${getLigoDockerImage()} compile contract`;\n\tconst inputFile = getInputFilename(parsedArgs, sourceFile);\n\tconst outputFile = `-o ${getOutputFilename(parsedArgs, sourceFile)}`;\n\tconst cmd = `${baseCmd} ${inputFile} ${outputFile}`;\n\treturn cmd;\n};\n\nconst getCompileExprCmd = (parsedArgs: Opts, sourceFile: string, exprKind: ExprKind, exprName: string): string => {\n\tconst projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;\n\tif (!projectDir) throw `No project directory provided`;\n\tconst compilerType = isStorageKind(exprKind) ? 'storage' : 'parameter';\n\tconst baseCmd =\n\t\t`DOCKER_DEFAULT_PLATFORM=linux/amd64 docker run --rm -v \\\"${projectDir}\\\":/project -w /project -u $(id -u):$(id -g) ${getLigoDockerImage()} compile ${compilerType}`;\n\tconst inputFile = getInputFilename(parsedArgs, sourceFile);\n\tconst outputFile = `-o ${getOutputExprFileName(parsedArgs, sourceFile, exprKind, exprName)}`;\n\tconst cmd = `${baseCmd} ${inputFile} ${exprName} ${outputFile}`;\n\treturn cmd;\n};\n\nconst compileContract = (parsedArgs: Opts, sourceFile: string): Promise<TableRow> =>\n\tgetArch()\n\t\t.then(() => getCompileContractCmd(parsedArgs, sourceFile))\n\t\t.then(execCmd)\n\t\t.then(({ stderr }) => {\n\t\t\tif (stderr.length > 0) sendWarn(stderr);\n\t\t\treturn {\n\t\t\t\tcontract: sourceFile,\n\t\t\t\tartifact: getOutputFilename(parsedArgs, sourceFile),\n\t\t\t};\n\t\t})\n\t\t.catch(err => {\n\t\t\temitExternalError(err, sourceFile);\n\t\t\treturn {\n\t\t\t\tcontract: sourceFile,\n\t\t\t\tartifact: COMPILE_ERR_MSG,\n\t\t\t};\n\t\t});\n\nconst compileExpr = (parsedArgs: Opts, sourceFile: string, exprKind: ExprKind) =>\n\t(exprName: string): Promise<TableRow> =>\n\t\tgetArch()\n\t\t\t.then(() => getCompileExprCmd(parsedArgs, sourceFile, exprKind, exprName))\n\t\t\t.then(execCmd)\n\t\t\t.then(({ stderr }) => {\n\t\t\t\tif (stderr.length > 0) sendWarn(stderr);\n\t\t\t\treturn {\n\t\t\t\t\tcontract: sourceFile,\n\t\t\t\t\tartifact: getOutputExprFileName(parsedArgs, sourceFile, exprKind, exprName),\n\t\t\t\t};\n\t\t\t})\n\t\t\t.catch(err => {\n\t\t\t\temitExternalError(err, sourceFile);\n\t\t\t\treturn {\n\t\t\t\t\tcontract: sourceFile,\n\t\t\t\t\tartifact: COMPILE_ERR_MSG,\n\t\t\t\t};\n\t\t\t});\n\nconst compileExprs = (parsedArgs: Opts, sourceFile: string, exprKind: ExprKind): Promise<TableRow[]> =>\n\treadFile(getInputFilename(parsedArgs, sourceFile), 'utf8')\n\t\t.then(data => data.match(/(?<=\\n\\s*(let|const)\\s+)[a-zA-Z0-9_]+/g))\n\t\t.then(exprNames => {\n\t\t\tif (!exprNames) return [];\n\t\t\tconst firstExprName = exprNames.slice(0, 1)[0];\n\t\t\tconst restExprNames = exprNames.slice(1, exprNames.length);\n\t\t\tconst firstExprKind = isStorageKind(exprKind) ? 'default_storage' : 'parameter';\n\t\t\tconst restExprKind = isStorageKind(exprKind) ? 'storage' : 'parameter';\n\t\t\tconst firstExprResult = compileExpr(parsedArgs, sourceFile, firstExprKind)(firstExprName);\n\t\t\tconst restExprResults = restExprNames.map(compileExpr(parsedArgs, sourceFile, restExprKind));\n\t\t\treturn Promise.all([firstExprResult].concat(restExprResults));\n\t\t})\n\t\t.catch(err => {\n\t\t\temitExternalError(err, sourceFile);\n\t\t\treturn [{\n\t\t\t\tcontract: sourceFile,\n\t\t\t\tartifact: `No ${isStorageKind(exprKind) ? 'storage' : 'parameter'} values compiled`,\n\t\t\t}];\n\t\t})\n\t\t.then(mergeArtifactsOutput(sourceFile));\n\n// TODO: Just for backwards compatibility. Can be deleted in the future.\nconst tryLegacyStorageNamingConvention = (parsedArgs: Opts, sourceFile: string) => {\n\tconst storageListFile = `${removeExt(sourceFile)}.storages${extractExt(sourceFile)}`;\n\tconst storageListFilename = getInputFilename(parsedArgs, storageListFile);\n\treturn access(storageListFilename).then(() => {\n\t\tsendWarn(\n\t\t\t`Warning: The naming convention of \"<CONTRACT>.storages.<EXTENSION>\" is deprecated and renamed to \"<CONTRACT>.storageList.<EXTENSION>\". Please adjust your storage file names accordingly\\n`,\n\t\t);\n\t\treturn compileExprs(parsedArgs, storageListFile, 'storage');\n\t});\n};\n\n// TODO: Just for backwards compatibility. Can be deleted in the future.\nconst tryLegacyParameterNamingConvention = (parsedArgs: Opts, sourceFile: string) => {\n\tconst parameterListFile = `${removeExt(sourceFile)}.parameters${extractExt(sourceFile)}`;\n\tconst parameterListFilename = getInputFilename(parsedArgs, parameterListFile);\n\treturn access(parameterListFilename).then(() => {\n\t\tsendWarn(\n\t\t\t`Warning: The naming convention of \"<CONTRACT>.parameters.<EXTENSION>\" is deprecated and renamed to \"<CONTRACT>.parameterList.<EXTENSION>\". Please adjust your parameter file names accordingly\\n`,\n\t\t);\n\t\treturn compileExprs(parsedArgs, parameterListFile, 'parameter');\n\t});\n};\n\nconst initContentForStorage = (sourceFile: string): string => {\n\tconst linkToContract = `#include \"${sourceFile}\"\\n\\n`;\n\n\tconst instruction =\n\t\t'// Define your initial storage values as a list of LIGO variable definitions,\\n// the first of which will be considered the default value to be used for origination later on\\n';\n\n\tconst ext = extractExt(sourceFile);\n\tlet syntax = '';\n\tif (ext === '.ligo') syntax = '// E.g. const aStorageValue : aStorageType = 10;\\n\\n';\n\telse if (ext === '.religo') syntax = '// E.g. let aStorageValue : aStorageType = 10;\\n\\n';\n\telse if (ext === '.mligo') syntax = '// E.g. let aStorageValue : aStorageType = 10\\n\\n';\n\telse if (ext === '.jsligo') syntax = '// E.g. const aStorageValue : aStorageType = 10;\\n\\n';\n\n\treturn linkToContract + instruction + syntax;\n};\n\nconst initContentForParameter = (sourceFile: string): string => {\n\tconst linkToContract = `#include \"${sourceFile}\"\\n\\n`;\n\n\tconst instruction = '// Define your parameter values as a list of LIGO variable definitions\\n';\n\n\tconst ext = extractExt(sourceFile);\n\tlet syntax = '';\n\tif (ext === '.ligo') syntax = '// E.g. const aParameterValue : aParameterType = Increment(1);\\n\\n';\n\telse if (ext === '.religo') syntax = '// E.g. let aParameterValue : aParameterType = (Increment (1));\\n\\n';\n\telse if (ext === '.mligo') syntax = '// E.g. let aParameterValue : aParameterType = Increment 1\\n\\n';\n\telse if (ext === '.jsligo') syntax = '// E.g. const aParameterValue : aParameterType = (Increment (1));\\n\\n';\n\n\treturn linkToContract + instruction + syntax;\n};\n\nconst compileContractWithStorageAndParameter = async (parsedArgs: Opts, sourceFile: string): Promise<TableRow[]> => {\n\tconst contractCompileResult = await compileContract(parsedArgs, sourceFile);\n\tif (contractCompileResult.artifact === COMPILE_ERR_MSG) return [contractCompileResult];\n\n\tconst storageListFile = `${removeExt(sourceFile)}.storageList${extractExt(sourceFile)}`;\n\tconst storageListFilename = getInputFilename(parsedArgs, storageListFile);\n\tconst storageCompileResult = await access(storageListFilename)\n\t\t.then(() => compileExprs(parsedArgs, storageListFile, 'storage'))\n\t\t.catch(() => tryLegacyStorageNamingConvention(parsedArgs, sourceFile))\n\t\t.catch(() => {\n\t\t\tsendWarn(\n\t\t\t\t`Note: storage file associated with \"${sourceFile}\" can't be found, so \"${storageListFile}\" has been created for you. Use this file to define all initial storage values for this contract\\n`,\n\t\t\t);\n\t\t\twriteFile(storageListFilename, initContentForStorage(sourceFile), 'utf8');\n\t\t});\n\n\tconst parameterListFile = `${removeExt(sourceFile)}.parameterList${extractExt(sourceFile)}`;\n\tconst parameterListFilename = getInputFilename(parsedArgs, parameterListFile);\n\tconst parameterCompileResult = await access(parameterListFilename)\n\t\t.then(() => compileExprs(parsedArgs, parameterListFile, 'parameter'))\n\t\t.catch(() => tryLegacyParameterNamingConvention(parsedArgs, sourceFile))\n\t\t.catch(() => {\n\t\t\tsendWarn(\n\t\t\t\t`Note: parameter file associated with \"${sourceFile}\" can't be found, so \"${parameterListFile}\" has been created for you. Use this file to define all parameter values for this contract\\n`,\n\t\t\t);\n\t\t\twriteFile(parameterListFilename, initContentForParameter(sourceFile), 'utf8');\n\t\t});\n\n\tlet compileResults: TableRow[] = [contractCompileResult];\n\tif (storageCompileResult) compileResults = compileResults.concat(storageCompileResult);\n\tif (parameterCompileResult) compileResults = compileResults.concat(parameterCompileResult);\n\treturn compileResults;\n};\n\n/*\nCompiling storage/parameter file amounts to compiling multiple expressions in that file,\nresulting in multiple rows with the same file name but different artifact names.\nThis will merge these rows into one row with just one mention of the file name.\ne.g.\n┌─────────────────────────┬─────────────────────────────────────────────┐\n│ Contract                │ Artifact                                    │\n├─────────────────────────┼─────────────────────────────────────────────┤\n│ hello.storageList.mligo │ artifacts/hello.default_storage.storage1.tz │\n├─────────────────────────┼─────────────────────────────────────────────┤\n│ hello.storageList.mligo │ artifacts/hello.storage.storage2.tz         │\n└─────────────────────────┴─────────────────────────────────────────────┘\n\t\t\t\t\t\t\t\tversus\n┌─────────────────────────┬─────────────────────────────────────────────┐\n│ Contract                │ Artifact                                    │\n├─────────────────────────┼─────────────────────────────────────────────┤\n│ hello.storageList.mligo │ artifacts/hello.default_storage.storage1.tz │\n│                         │ artifacts/hello.storage.storage2.tz         │\n└─────────────────────────┴─────────────────────────────────────────────┘\n*/\nconst mergeArtifactsOutput = (sourceFile: string) =>\n\t(tableRows: TableRow[]): TableRow[] => {\n\t\tconst artifactsOutput = tableRows.reduce(\n\t\t\t(acc: string, row: TableRow) => row.artifact === COMPILE_ERR_MSG ? acc : `${acc}${row.artifact}\\n`,\n\t\t\t'',\n\t\t);\n\t\treturn [{\n\t\t\tcontract: sourceFile,\n\t\t\tartifact: artifactsOutput,\n\t\t}];\n\t};\n\nconst compile = (parsedArgs: Opts): Promise<void> => {\n\tconst sourceFile = parsedArgs.sourceFile;\n\tlet p: Promise<TableRow[]>;\n\tif (isStorageListFile(sourceFile)) p = compileExprs(parsedArgs, sourceFile, 'storage');\n\telse if (isParameterListFile(sourceFile)) p = compileExprs(parsedArgs, sourceFile, 'parameter');\n\telse if (isContractFile(sourceFile)) p = compileContractWithStorageAndParameter(parsedArgs, sourceFile);\n\telse {\n\t\treturn sendAsyncErr(\n\t\t\t`${sourceFile} doesn't have a valid LIGO extension ('.ligo', '.religo', '.mligo' or '.jsligo')`,\n\t\t);\n\t}\n\treturn p.then(sendJsonRes).catch(err => sendAsyncErr(err, false));\n};\n\nexport default compile;\n","import { CmdArgEnv, getArch, sendAsyncErr, sendRes, spawnCmd } from '@taqueria/node-sdk';\nimport { getLigoDockerImage, LigoOpts as Opts } from './common';\n\nconst getArbitraryLigoCmd = (parsedArgs: Opts, userArgs: string): CmdArgEnv => {\n\tconst projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;\n\tif (!projectDir) throw `No project directory provided`;\n\tconst binary = 'docker';\n\tconst baseArgs = ['run', '--rm', '-v', `${projectDir}:/project`, '-w', '/project', getLigoDockerImage()];\n\tconst processedUserArgs = userArgs.split(' ').map(arg => arg.startsWith('\\\\-') ? arg.substring(1) : arg).filter(arg =>\n\t\targ\n\t);\n\tconst args = baseArgs.concat(processedUserArgs);\n\tconst envVars = { 'DOCKER_DEFAULT_PLATFORM': 'linux/amd64' };\n\treturn [binary, args, envVars];\n};\n\nconst runArbitraryLigoCmd = (parsedArgs: Opts, cmd: string): Promise<string> =>\n\tgetArch()\n\t\t.then(() => getArbitraryLigoCmd(parsedArgs, cmd))\n\t\t.then(spawnCmd)\n\t\t.then(code =>\n\t\t\tcode !== null && code === 0\n\t\t\t\t? `Command \"${cmd}\" ran successfully by LIGO`\n\t\t\t\t: `Command \"${cmd}\" failed. Please check your command`\n\t\t)\n\t\t.catch(err => sendAsyncErr(`An internal error has occurred: ${err.message}`));\n\nconst ligo = (parsedArgs: Opts): Promise<void> => {\n\tconst args = parsedArgs.command;\n\treturn runArbitraryLigoCmd(parsedArgs, args).then(sendRes).catch(err => sendAsyncErr(err, false));\n};\n\nexport default ligo;\n","import { execCmd, getArch, sendAsyncErr, sendJsonRes, sendWarn } from '@taqueria/node-sdk';\nimport { emitExternalError, getInputFilename, getLigoDockerImage, TestOpts as Opts } from './common';\n\ntype TableRow = { contract: string; testResults: string };\n\nconst getTestContractCmd = (parsedArgs: Opts, sourceFile: string): string => {\n\tconst projectDir = process.env.PROJECT_DIR ?? parsedArgs.projectDir;\n\tif (!projectDir) throw `No project directory provided`;\n\tconst baseCmd =\n\t\t`DOCKER_DEFAULT_PLATFORM=linux/amd64 docker run --rm -v \\\"${projectDir}\\\":/project -w /project -u $(id -u):$(id -g) ${getLigoDockerImage()} run test`;\n\tconst inputFile = getInputFilename(parsedArgs, sourceFile);\n\tconst cmd = `${baseCmd} ${inputFile}`;\n\treturn cmd;\n};\n\nconst testContract = (parsedArgs: Opts, sourceFile: string): Promise<TableRow> =>\n\tgetArch()\n\t\t.then(() => getTestContractCmd(parsedArgs, sourceFile))\n\t\t.then(execCmd)\n\t\t.then(({ stdout, stderr }) => {\n\t\t\tif (stderr.length > 0) sendWarn(stderr);\n\t\t\tconst result = '🎉 All tests passed 🎉';\n\t\t\treturn {\n\t\t\t\tcontract: sourceFile,\n\t\t\t\ttestResults: stdout.length > 0 ? `${stdout}\\n${result}` : result,\n\t\t\t};\n\t\t})\n\t\t.catch(err => {\n\t\t\temitExternalError(err, sourceFile);\n\t\t\treturn {\n\t\t\t\tcontract: sourceFile,\n\t\t\t\ttestResults: 'Some tests failed :(',\n\t\t\t};\n\t\t});\n\nconst test = (parsedArgs: Opts): Promise<void> => {\n\tconst sourceFile = parsedArgs.sourceFile;\n\treturn testContract(parsedArgs, sourceFile).then(result => [result]).then(sendJsonRes).catch(err =>\n\t\tsendAsyncErr(err, false)\n\t);\n};\n\nexport default test;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}