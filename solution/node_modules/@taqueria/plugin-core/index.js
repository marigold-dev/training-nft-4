var $adXGT$taquerianodesdk = require("@taqueria/node-sdk");




const $7fd597fee973c8bb$var$ECAD_FLEXTESA_IMAGE = "ghcr.io/ecadlabs/taqueria-flextesa";
const $7fd597fee973c8bb$var$FLEXTESA_IMAGE = "oxheadalpha/flextesa";
const $7fd597fee973c8bb$var$LIGO_IMAGE = "ligolang/ligo";
const $7fd597fee973c8bb$var$ARCHETYPE_IMAGE = "completium/archetype";
const $7fd597fee973c8bb$var$ECAD_TZKT_IMAGE = "alirezahaghshenas/tzkt";
const $7fd597fee973c8bb$var$getDockerImageIdsCmd = ()=>{
    const images = [
        $7fd597fee973c8bb$var$ECAD_FLEXTESA_IMAGE,
        $7fd597fee973c8bb$var$FLEXTESA_IMAGE,
        $7fd597fee973c8bb$var$LIGO_IMAGE,
        $7fd597fee973c8bb$var$ARCHETYPE_IMAGE,
        $7fd597fee973c8bb$var$ECAD_TZKT_IMAGE
    ];
    const imageFilters = images.reduce((acc, image)=>`${acc} --filter "reference=${image}"`, "");
    const cmd = `docker images --quiet ${imageFilters} | uniq`;
    return cmd;
};
const $7fd597fee973c8bb$var$removeStates = ()=>(0, $adXGT$taquerianodesdk.execCmd)("rm .taq/*state*.json").catch(()=>{}); // just ignore and resolve it
const $7fd597fee973c8bb$var$removeImages = ()=>(0, $adXGT$taquerianodesdk.execCmd)($7fd597fee973c8bb$var$getDockerImageIdsCmd()).then((results)=>{
        const images = results.stdout.replace(/\s/g, " ");
        if (images) return (0, $adXGT$taquerianodesdk.execCmd)(`docker rmi --force ${images}`);
    }).catch(()=>Promise.reject(new Error("Unable to clean all docker images properly. Maybe you need to delete all Taqueria-related containers first")));
const $7fd597fee973c8bb$var$clean = (parsedArgs)=>{
    const env = (0, $adXGT$taquerianodesdk.getCurrentEnvironmentConfig)(parsedArgs);
    if (!env) return (0, $adXGT$taquerianodesdk.sendAsyncErr)(`There is no environment called ${parsedArgs.env} in your config.json`);
    return Promise.resolve().then($7fd597fee973c8bb$var$removeStates).then($7fd597fee973c8bb$var$removeImages).then(()=>(0, $adXGT$taquerianodesdk.sendJsonRes)("All Taqueria-related states and docker images cleaned \uD83E\uDDFD")).catch((err)=>(0, $adXGT$taquerianodesdk.sendAsyncErr)(`Error occurred during cleaning: ${err.message}`));
};
var $7fd597fee973c8bb$export$2e2bcd8739ae039 = $7fd597fee973c8bb$var$clean;


const $48ae047e78ce78ac$export$b75f8c4f8f3fbd14 = (parsedArgs)=>{
    switch(parsedArgs.task){
        case "clean":
            return (0, $7fd597fee973c8bb$export$2e2bcd8739ae039)(parsedArgs);
        default:
            return (0, $adXGT$taquerianodesdk.sendAsyncErr)(`${parsedArgs.task} is not an understood task by the Core plugin`);
    }
};
var $48ae047e78ce78ac$export$2e2bcd8739ae039 = $48ae047e78ce78ac$export$b75f8c4f8f3fbd14;


(0, $adXGT$taquerianodesdk.Plugin).create((_i18n)=>({
        alias: "core",
        schema: "1.0",
        version: "0.1",
        tasks: [
            (0, $adXGT$taquerianodesdk.Task).create({
                task: "clean",
                command: "clean",
                description: "Clean all the Taqueria-related docker images",
                handler: "proxy",
                encoding: "application/json"
            }), 
        ],
        proxy: (0, $48ae047e78ce78ac$export$2e2bcd8739ae039)
    }), process.argv);


//# sourceMappingURL=index.js.map
