{"mappings":"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","sources":["taqueria-plugin-core/index.ts","taqueria-plugin-core/core.ts","taqueria-plugin-core/clean.ts"],"sourcesContent":["import { Plugin, Task } from '@taqueria/node-sdk';\nimport core from './core';\n\nPlugin.create(_i18n => ({\n\talias: 'core',\n\tschema: '1.0',\n\tversion: '0.1',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'clean',\n\t\t\tcommand: 'clean',\n\t\t\tdescription: 'Clean all the Taqueria-related docker images',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t],\n\tproxy: core,\n}), process.argv);\n","import { sendAsyncErr } from '@taqueria/node-sdk';\nimport clean from './clean';\nimport { IntersectionOpts as Opts } from './common';\n\nexport const core = (parsedArgs: Opts): Promise<void> => {\n\tswitch (parsedArgs.task) {\n\t\tcase 'clean':\n\t\t\treturn clean(parsedArgs);\n\t\tdefault:\n\t\t\treturn sendAsyncErr(`${parsedArgs.task} is not an understood task by the Core plugin`);\n\t}\n};\n\nexport default core;\n","import { execCmd, getCurrentEnvironmentConfig, sendAsyncErr, sendJsonRes } from '@taqueria/node-sdk';\nimport { RequestArgs } from '@taqueria/node-sdk/types';\n\nconst ECAD_FLEXTESA_IMAGE = 'ghcr.io/ecadlabs/taqueria-flextesa';\nconst FLEXTESA_IMAGE = 'oxheadalpha/flextesa';\nconst LIGO_IMAGE = 'ligolang/ligo';\nconst ARCHETYPE_IMAGE = 'completium/archetype';\nconst ECAD_TZKT_IMAGE = 'alirezahaghshenas/tzkt';\n\nconst getDockerImageIdsCmd = (): string => {\n\tconst images = [ECAD_FLEXTESA_IMAGE, FLEXTESA_IMAGE, LIGO_IMAGE, ARCHETYPE_IMAGE, ECAD_TZKT_IMAGE];\n\tconst imageFilters = images.reduce((acc, image) => `${acc} --filter \"reference=${image}\"`, '');\n\tconst cmd = `docker images --quiet ${imageFilters} | uniq`;\n\treturn cmd;\n};\n\nconst removeStates = () =>\n\texecCmd('rm .taq/*state*.json')\n\t\t.catch(() => {}); // just ignore and resolve it\n\nconst removeImages = () =>\n\texecCmd(getDockerImageIdsCmd())\n\t\t.then(results => {\n\t\t\tconst images = results.stdout.replace(/\\s/g, ' ');\n\t\t\tif (images) return execCmd(`docker rmi --force ${images}`);\n\t\t})\n\t\t.catch(() =>\n\t\t\tPromise.reject(\n\t\t\t\tnew Error(\n\t\t\t\t\t'Unable to clean all docker images properly. Maybe you need to delete all Taqueria-related containers first',\n\t\t\t\t),\n\t\t\t)\n\t\t);\n\nconst clean = (parsedArgs: RequestArgs.ProxyRequestArgs): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\treturn Promise.resolve()\n\t\t.then(removeStates)\n\t\t.then(removeImages)\n\t\t.then(() => sendJsonRes('All Taqueria-related states and docker images cleaned ðŸ§½'))\n\t\t.catch(err => sendAsyncErr(`Error occurred during cleaning: ${err.message}`));\n};\n\nexport default clean;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}