var $iVZbm$taquerianodesdk = require("@taqueria/node-sdk");
var $iVZbm$taquitosigner = require("@taquito/signer");
var $iVZbm$taquitotaquito = require("@taquito/taquito");
var $iVZbm$taquitomichelcodec = require("@taquito/michel-codec");
var $iVZbm$path = require("path");







const $2c87226370e1ba97$export$e1210318d02974b = (parsedArgs, env)=>{
    const targetConstraintErrMsg = "Each environment can only have one target, be it a network or a sandbox";
    if (env.networks?.length === 1 && env.sandboxes?.length === 1) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(targetConstraintErrMsg);
    if (env.networks?.length === 1) {
        const networkName = env.networks[0];
        const network = (0, $iVZbm$taquerianodesdk.getNetworkConfig)(parsedArgs)(networkName);
        if (!network) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`The current environment is configured to use a network called '${networkName}'; however, no network of this name has been configured in .taq/config.json`);
        return Promise.resolve([
            "Network",
            network
        ]);
    }
    if (env.sandboxes?.length === 1) {
        const sandboxName = env.sandboxes[0];
        const sandbox = (0, $iVZbm$taquerianodesdk.getSandboxConfig)(parsedArgs)(sandboxName);
        if (!sandbox) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`The current environment is configured to use a sandbox called '${sandboxName}'; however, no sandbox of this name has been configured in .taq/config.json`);
        return Promise.resolve([
            "Sandbox",
            sandbox
        ]);
    }
    return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(targetConstraintErrMsg);
};
const $2c87226370e1ba97$export$cf995f4bdbe82fd9 = async (sandbox, sender)=>{
    let accountKey;
    if (sender && sender !== "default") {
        const accounts = $2c87226370e1ba97$export$f9fd6b8c665ab918(sandbox);
        if (accounts.hasOwnProperty(sender)) accountKey = accounts[sender].secretKey;
        else return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`${sender} is not an account instantiated in the current environment. Check .taq/config.json`);
    } else {
        const defaultAccount = (0, $iVZbm$taquerianodesdk.getDefaultSandboxAccount)(sandbox);
        if (!defaultAccount) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`No default account is specified in the sandbox to perform the operation. Please use the --sender flag to explicitly specify the account to use as the sender of the operation`);
        accountKey = defaultAccount.secretKey;
    }
    const tezos = new (0, $iVZbm$taquitotaquito.TezosToolkit)(sandbox.rpcUrl);
    tezos.setProvider({
        signer: new (0, $iVZbm$taquitosigner.InMemorySigner)(accountKey.replace(/^unencrypted:/, ""))
    });
    return tezos;
};
const $2c87226370e1ba97$export$5a1c5b7c3009d1b0 = async (parsedArgs, network, sender)=>{
    let account;
    if (sender && sender !== (0, $iVZbm$taquerianodesdk.TAQ_OPERATOR_ACCOUNT)) {
        const accounts = $2c87226370e1ba97$export$e56de24c31a1cc9e(network);
        if (accounts.hasOwnProperty(sender)) account = sender;
        else return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`${sender} is not an account instantiated in the current environment. Check .taq/config.json`);
    } else account = (0, $iVZbm$taquerianodesdk.TAQ_OPERATOR_ACCOUNT);
    const tezos = new (0, $iVZbm$taquitotaquito.TezosToolkit)(network.rpcUrl);
    const key = await (0, $iVZbm$taquerianodesdk.getAccountPrivateKey)(parsedArgs, network, account);
    await (0, $iVZbm$taquitosigner.importKey)(tezos, key);
    return tezos;
};
const $2c87226370e1ba97$export$ac04c99a21479c39 = (parsedArgs)=>Object.entries(parsedArgs.config.accounts).reduce((acc, declaredAccount)=>{
        const alias = declaredAccount[0];
        const mutez = declaredAccount[1];
        return {
            ...acc,
            [alias]: typeof mutez === "string" ? parseFloat(mutez) : mutez
        };
    }, {});
const $2c87226370e1ba97$export$f9fd6b8c665ab918 = (sandbox)=>sandbox?.accounts ? Object.entries(sandbox.accounts).reduce((acc, instantiatedAccount)=>{
        const alias = instantiatedAccount[0];
        const keys = instantiatedAccount[1];
        return alias !== "default" ? {
            ...acc,
            [alias]: keys
        } : acc;
    }, {}) : {};
const $2c87226370e1ba97$export$e56de24c31a1cc9e = (network)=>network.accounts ? Object.entries(network.accounts).reduce((acc, instantiatedAccount)=>{
        const alias = instantiatedAccount[0];
        const keys = instantiatedAccount[1];
        return alias !== (0, $iVZbm$taquerianodesdk.TAQ_OPERATOR_ACCOUNT) ? {
            ...acc,
            [alias]: keys
        } : acc;
    }, {}) : {};
const $2c87226370e1ba97$export$c5dc6d68f9166ad7 = async (parsedArgs, network, account)=>{
    const tezos = new (0, $iVZbm$taquitotaquito.TezosToolkit)(network.rpcUrl);
    const key = await (0, $iVZbm$taquerianodesdk.getAccountPrivateKey)(parsedArgs, network, account);
    await (0, $iVZbm$taquitosigner.importKey)(tezos, key);
};
const $2c87226370e1ba97$export$eadeae1f47371140 = (err, env)=>{
    if (err instanceof Error) {
        const msg = err.message;
        if (/ENOTFOUND/.test(msg)) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("The RPC URL may be invalid. Check ./.taq/config.json");
        if (/ECONNREFUSED/.test(msg)) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("The RPC URL may be down or the sandbox is not running");
        if (/empty_implicit_contract/.test(msg)) {
            const result = msg.match(/(?<="implicit":")tz[^"]+(?=")/);
            const publicKeyHash = result ? result[0] : undefined;
            if (publicKeyHash) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`The account ${publicKeyHash} for the target environment, "${env}", may not be funded\nTo fund this account:\n1. Go to https://teztnets.xyz and click "Faucet" of the target testnet\n2. Copy and paste the above key into the wallet address field\n3. Request some Tez (Note that you might need to wait for a few seconds for the network to register the funds)`);
        }
    }
    return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`Error while performing operation:\n${err} ${JSON.stringify(err, null, 2)}`);
};





const $944e64d99e99b46e$var$isContractAddress = (contract)=>contract.startsWith("tz1") || contract.startsWith("tz2") || contract.startsWith("tz3") || contract.startsWith("KT1");
const $944e64d99e99b46e$var$getContractInfo = async (parsedArgs, env)=>{
    const contract = parsedArgs.contract;
    return {
        contractAlias: $944e64d99e99b46e$var$isContractAddress(contract) ? "N/A" : contract,
        contractAddress: $944e64d99e99b46e$var$isContractAddress(contract) ? contract : await (0, $iVZbm$taquerianodesdk.getAddressOfAlias)(env, contract),
        parameter: parsedArgs.param ? await (0, $iVZbm$taquerianodesdk.getParameter)(parsedArgs, parsedArgs.param) : "Unit",
        entrypoint: parsedArgs.entrypoint ?? "default",
        mutezTransfer: parseInt(parsedArgs.mutez ?? "0")
    };
};
const $944e64d99e99b46e$var$createBatchForTransfer = (tezos, contractsInfo)=>contractsInfo.reduce((acc, contractInfo)=>acc.withTransfer({
            to: contractInfo.contractAddress,
            amount: contractInfo.mutezTransfer,
            parameter: {
                entrypoint: contractInfo.entrypoint,
                value: new (0, $iVZbm$taquitomichelcodec.Parser)().parseMichelineExpression(contractInfo.parameter)
            },
            mutez: true
        }), tezos.wallet.batch());
const $944e64d99e99b46e$export$e61a38557a73155d = async (tezos, env, contractsInfo)=>{
    const batch = $944e64d99e99b46e$var$createBatchForTransfer(tezos, contractsInfo);
    try {
        const op = await batch.send();
        await op.confirmation();
        return op;
    } catch (err) {
        return (0, $2c87226370e1ba97$export$eadeae1f47371140)(err, env);
    }
};
const $944e64d99e99b46e$var$prepContractInfoForDisplay = (tezos, contractInfo)=>{
    return {
        contractAlias: contractInfo.contractAlias,
        contractAddress: contractInfo.contractAddress,
        parameter: contractInfo.parameter,
        entrypoint: contractInfo.entrypoint,
        mutezTransfer: contractInfo.mutezTransfer.toString(),
        destination: tezos.rpc.getRpcUrl()
    };
};
const $944e64d99e99b46e$var$transfer = async (parsedArgs)=>{
    const env = (0, $iVZbm$taquerianodesdk.getCurrentEnvironmentConfig)(parsedArgs);
    if (!env) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`There is no environment called ${parsedArgs.env} in your config.json`);
    try {
        const [envType, nodeConfig] = await (0, $2c87226370e1ba97$export$e1210318d02974b)(parsedArgs, env);
        const tezos = await (envType === "Network" ? (0, $2c87226370e1ba97$export$5a1c5b7c3009d1b0)(parsedArgs, nodeConfig, parsedArgs.sender) : (0, $2c87226370e1ba97$export$cf995f4bdbe82fd9)(nodeConfig, parsedArgs.sender));
        const contractInfo = await $944e64d99e99b46e$var$getContractInfo(parsedArgs, env);
        await $944e64d99e99b46e$export$e61a38557a73155d(tezos, (0, $iVZbm$taquerianodesdk.getCurrentEnvironment)(parsedArgs), [
            contractInfo
        ]);
        const contractInfoForDisplay = $944e64d99e99b46e$var$prepContractInfoForDisplay(tezos, contractInfo);
        return (0, $iVZbm$taquerianodesdk.sendJsonRes)([
            contractInfoForDisplay
        ]);
    } catch  {
        return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("No operations performed");
    }
};
var $944e64d99e99b46e$export$2e2bcd8739ae039 = $944e64d99e99b46e$var$transfer;


const $1e142599cb4e04fd$var$getAccountsInfo = (parsedArgs, tezos, instantiatedAccounts)=>Promise.all(Object.entries(instantiatedAccounts).map(async (instantiatedAccount)=>{
        const alias = instantiatedAccount[0];
        const aliasInfo = instantiatedAccount[1];
        const declaredMutez = (0, $2c87226370e1ba97$export$ac04c99a21479c39)(parsedArgs)[alias];
        const currentBalanceInMutez = (await tezos.tz.getBalance(aliasInfo.publicKeyHash)).toNumber();
        const amountToFillInMutez = declaredMutez ? Math.max(declaredMutez - currentBalanceInMutez, 0) : 0;
        if (!declaredMutez) (0, $iVZbm$taquerianodesdk.sendWarn)(`Warning: ${alias} is instantiated in the target environment but not declared in the root level "accounts" field of ./.taq/config.json so ${alias} will not be funded as you don't have a declared tez amount set there for ${alias}\n`);
        return {
            contractAlias: alias,
            contractAddress: aliasInfo.publicKeyHash,
            parameter: "Unit",
            entrypoint: "default",
            mutezTransfer: parseInt(amountToFillInMutez.toString())
        };
    })).then((accountsInfo)=>accountsInfo.filter((accountInfo)=>accountInfo.mutezTransfer !== 0)).catch((err)=>(0, $iVZbm$taquerianodesdk.sendAsyncErr)(`Something went wrong while extracting account information - ${err}`));
const $1e142599cb4e04fd$var$prepAccountsInfoForDisplay = (accountsInfo)=>accountsInfo.map((accountInfo)=>{
        return {
            accountAlias: accountInfo.contractAlias,
            accountAddress: accountInfo.contractAddress,
            mutezFunded: accountInfo.mutezTransfer.toString()
        };
    });
const $1e142599cb4e04fd$var$fund = async (parsedArgs)=>{
    const env = (0, $iVZbm$taquerianodesdk.getCurrentEnvironmentConfig)(parsedArgs);
    if (!env) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`There is no environment called ${parsedArgs.env} in your config.json`);
    try {
        const [envType, nodeConfig] = await (0, $2c87226370e1ba97$export$e1210318d02974b)(parsedArgs, env);
        if (envType !== "Network") return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("taq fund can only be executed in a network environment");
        const tezos = await (0, $2c87226370e1ba97$export$5a1c5b7c3009d1b0)(parsedArgs, nodeConfig);
        const instantiatedAccounts = (0, $2c87226370e1ba97$export$e56de24c31a1cc9e)(nodeConfig);
        const accountsInfo = await $1e142599cb4e04fd$var$getAccountsInfo(parsedArgs, tezos, instantiatedAccounts);
        if (accountsInfo.length === 0) return (0, $iVZbm$taquerianodesdk.sendJsonRes)(`All instantiated accounts in the current environment, "${parsedArgs.env}", are funded up to or beyond the declared amount`);
        await (0, $944e64d99e99b46e$export$e61a38557a73155d)(tezos, (0, $iVZbm$taquerianodesdk.getCurrentEnvironment)(parsedArgs), accountsInfo);
        const accountsInfoForDisplay = $1e142599cb4e04fd$var$prepAccountsInfoForDisplay(accountsInfo);
        return (0, $iVZbm$taquerianodesdk.sendJsonRes)(accountsInfoForDisplay);
    } catch  {
        return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("No operations performed");
    }
};
var $1e142599cb4e04fd$export$2e2bcd8739ae039 = $1e142599cb4e04fd$var$fund;




const $ae16ebef21e504f4$var$instantiate_account = async (parsedArgs)=>{
    const env = (0, $iVZbm$taquerianodesdk.getCurrentEnvironmentConfig)(parsedArgs);
    if (!env) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`There is no environment called ${parsedArgs.env} in your config.json`);
    try {
        const [envType, nodeConfig] = await (0, $2c87226370e1ba97$export$e1210318d02974b)(parsedArgs, env);
        if (envType !== "Network") return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("taq instantiate-account can only be executed in a network environment");
        const declaredAccountAliases = Object.keys((0, $2c87226370e1ba97$export$ac04c99a21479c39)(parsedArgs));
        const instantiatedAccounts = (0, $2c87226370e1ba97$export$e56de24c31a1cc9e)(nodeConfig);
        let accountsInstantiated = [];
        for (const declaredAccountAlias of declaredAccountAliases)if (!instantiatedAccounts.hasOwnProperty(declaredAccountAlias)) {
            await (0, $2c87226370e1ba97$export$c5dc6d68f9166ad7)(parsedArgs, nodeConfig, declaredAccountAlias);
            accountsInstantiated.push(declaredAccountAlias);
        } else (0, $iVZbm$taquerianodesdk.sendWarn)(`Note: ${declaredAccountAlias} is already instantiated in the current environment, "${parsedArgs.env}"`);
        if (accountsInstantiated.length !== 0) return (0, $iVZbm$taquerianodesdk.sendJsonRes)(`Accounts instantiated: ${accountsInstantiated.join(", ")}.\nPlease execute "taq fund" targeting the same environment to fund these accounts`);
        else return (0, $iVZbm$taquerianodesdk.sendJsonRes)(`No accounts were instantiated because they were all instantiated in the target environment already`);
    } catch  {
        return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("No operations performed");
    }
};
var $ae16ebef21e504f4$export$2e2bcd8739ae039 = $ae16ebef21e504f4$var$instantiate_account;





const $806c5c6032403442$var$getContractPath = (parsedArgs, contractFilename)=>(0, $iVZbm$path.join)(parsedArgs.config.artifactsDir, /\.tz$/.test(contractFilename) ? contractFilename : `${contractFilename}.tz`);
const $806c5c6032403442$var$getDefaultStorageFilename = (contractName)=>{
    const baseFilename = (0, $iVZbm$path.basename)(contractName, (0, $iVZbm$path.extname)(contractName));
    const extFilename = (0, $iVZbm$path.extname)(contractName);
    const defaultStorage = `${baseFilename}.default_storage${extFilename}`;
    return defaultStorage;
};
const $806c5c6032403442$var$getContractInfo = async (parsedArgs)=>{
    const contract = parsedArgs.contract;
    const contractWithTzExtension = (0, $iVZbm$taquerianodesdk.addTzExtensionIfMissing)(contract);
    const contractCode = await (0, $iVZbm$taquerianodesdk.getContractContent)(parsedArgs, contractWithTzExtension);
    if (contractCode === undefined) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`Please generate ${contractWithTzExtension} with one of the compilers (LIGO, SmartPy, Archetype) or write it manually and put it under /${parsedArgs.config.artifactsDir}\n`);
    const storageFilename = parsedArgs.storage ?? $806c5c6032403442$var$getDefaultStorageFilename(contractWithTzExtension);
    const contractInitStorage = await (0, $iVZbm$taquerianodesdk.getContractContent)(parsedArgs, storageFilename);
    if (contractInitStorage === undefined) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`❌ No initial storage file was found for ${contractWithTzExtension}\nStorage must be specified in a file as a Michelson expression and will automatically be linked to this contract if specified with the name "${$806c5c6032403442$var$getDefaultStorageFilename(contractWithTzExtension)}" in the artifacts directory\nYou can also manually pass a storage file to the originate task using the --storage STORAGE_FILE_NAME option\n`);
    return {
        contract: contract,
        code: contractCode,
        initStorage: contractInitStorage,
        mutezTransfer: parseInt(parsedArgs.mutez ?? "0")
    };
};
const $806c5c6032403442$var$createBatchForOriginate = (tezos, contractsInfo)=>contractsInfo.reduce((acc, contractInfo)=>acc.withOrigination({
            code: contractInfo.code,
            init: contractInfo.initStorage,
            balance: contractInfo.mutezTransfer.toString(),
            mutez: true
        }), tezos.wallet.batch());
const $806c5c6032403442$export$4737da0e626ec8c7 = async (tezos, env, contractsInfo)=>{
    const batch = $806c5c6032403442$var$createBatchForOriginate(tezos, contractsInfo);
    try {
        const op = await batch.send();
        await op.confirmation();
        return op;
    } catch (err) {
        return (0, $2c87226370e1ba97$export$eadeae1f47371140)(err, env);
    }
};
const $806c5c6032403442$var$prepContractInfoForDisplay = async (parsedArgs, tezos, contractInfo, op)=>{
    const operationResults = await op.operationResults();
    const originationResults = operationResults.filter((result)=>result.kind === "origination").map((result)=>result);
    // Length should be 1 since we are batching originate operations into one
    const result1 = originationResults.length === 1 ? originationResults[0] : undefined;
    const address = result1?.metadata?.operation_result?.originated_contracts?.join(",");
    const alias = parsedArgs.alias ?? (0, $iVZbm$path.basename)(contractInfo.contract, (0, $iVZbm$path.extname)(contractInfo.contract));
    if (address) await (0, $iVZbm$taquerianodesdk.updateAddressAlias)(parsedArgs, alias, address);
    return {
        contract: contractInfo.contract,
        address: address ?? "Something went wrong during origination",
        alias: address ? alias : "N/A",
        balanceInMutez: contractInfo.mutezTransfer.toString(),
        destination: tezos.rpc.getRpcUrl()
    };
};
const $806c5c6032403442$var$originate = async (parsedArgs)=>{
    const env = (0, $iVZbm$taquerianodesdk.getCurrentEnvironmentConfig)(parsedArgs);
    if (!env) return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`There is no environment called ${parsedArgs.env} in your config.json`);
    try {
        const [envType, nodeConfig] = await (0, $2c87226370e1ba97$export$e1210318d02974b)(parsedArgs, env);
        const tezos = await (envType === "Network" ? (0, $2c87226370e1ba97$export$5a1c5b7c3009d1b0)(parsedArgs, nodeConfig, parsedArgs.sender) : (0, $2c87226370e1ba97$export$cf995f4bdbe82fd9)(nodeConfig, parsedArgs.sender));
        const contractInfo = await $806c5c6032403442$var$getContractInfo(parsedArgs);
        const op = await $806c5c6032403442$export$4737da0e626ec8c7(tezos, (0, $iVZbm$taquerianodesdk.getCurrentEnvironment)(parsedArgs), [
            contractInfo
        ]);
        const contractInfoForDisplay = await $806c5c6032403442$var$prepContractInfoForDisplay(parsedArgs, tezos, contractInfo, op);
        return (0, $iVZbm$taquerianodesdk.sendJsonRes)([
            contractInfoForDisplay
        ]);
    } catch  {
        return (0, $iVZbm$taquerianodesdk.sendAsyncErr)("No operations performed");
    }
};
var $806c5c6032403442$export$2e2bcd8739ae039 = $806c5c6032403442$var$originate;



const $0b2a174572c7ba1b$export$f22da7240b7add18 = (parsedArgs)=>{
    switch(parsedArgs.task){
        case "deploy":
            return (0, $806c5c6032403442$export$2e2bcd8739ae039)(parsedArgs);
        case "transfer":
            return (0, $944e64d99e99b46e$export$2e2bcd8739ae039)(parsedArgs);
        case "instantiate-account":
            return (0, $ae16ebef21e504f4$export$2e2bcd8739ae039)(parsedArgs);
        case "fund":
            return (0, $1e142599cb4e04fd$export$2e2bcd8739ae039)(parsedArgs);
        default:
            return (0, $iVZbm$taquerianodesdk.sendAsyncErr)(`${parsedArgs.task} is not an understood task by the Taquito plugin`);
    }
};
var $0b2a174572c7ba1b$export$2e2bcd8739ae039 = $0b2a174572c7ba1b$export$f22da7240b7add18;


(0, $iVZbm$taquerianodesdk.Plugin).create((_i18n)=>({
        alias: "taquito",
        schema: "1.0",
        version: "0.1",
        tasks: [
            (0, $iVZbm$taquerianodesdk.Task).create({
                task: "deploy",
                command: "deploy <contract>",
                description: "Deploy a smart contract to a particular environment",
                options: [
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "alias",
                        description: "Alias used to refer to the deployed contract's address",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "storage",
                        description: "Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "sender",
                        description: "Name of an instantiated account to use as the sender of the originate operation",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "mutez",
                        description: "Amount of Mutez to transfer",
                        required: false
                    }), 
                ],
                aliases: [
                    "originate"
                ],
                handler: "proxy",
                encoding: "application/json"
            }),
            (0, $iVZbm$taquerianodesdk.Task).create({
                task: "transfer",
                command: "transfer <contract>",
                description: "Transfer/call an implicit account or a smart contract (specified via its alias or address) deployed to a particular environment",
                options: [
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "mutez",
                        description: "Amount of Mutez to transfer",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "param",
                        description: "Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "entrypoint",
                        description: "You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))",
                        required: false
                    }),
                    (0, $iVZbm$taquerianodesdk.Option).create({
                        flag: "sender",
                        description: "Name of an instantiated account to use as the sender of the transfer operation",
                        required: false
                    }), 
                ],
                aliases: [
                    "call"
                ],
                handler: "proxy",
                encoding: "application/json"
            }),
            (0, $iVZbm$taquerianodesdk.Task).create({
                task: "fund",
                command: "fund",
                description: "Fund all the instantiated accounts up to the desired/declared amount in a target environment",
                handler: "proxy",
                encoding: "application/json"
            }),
            (0, $iVZbm$taquerianodesdk.Task).create({
                task: "instantiate-account",
                command: "instantiate-account",
                description: 'Instantiate all accounts declared in the "accounts" field at the root level of the config file to a target environment',
                handler: "proxy",
                encoding: "application/json"
            }), 
        ],
        proxy: (0, $0b2a174572c7ba1b$export$2e2bcd8739ae039)
    }), process.argv);


//# sourceMappingURL=index.js.map
