{"mappings":"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","sources":["taqueria-plugin-taquito/index.ts","taqueria-plugin-taquito/main.ts","taqueria-plugin-taquito/fund.ts","taqueria-plugin-taquito/common.ts","taqueria-plugin-taquito/transfer.ts","taqueria-plugin-taquito/instantiate_account.ts","taqueria-plugin-taquito/originate.ts"],"sourcesContent":["import { Option, Plugin, Task } from '@taqueria/node-sdk';\nimport main from './main';\n\nPlugin.create(_i18n => ({\n\talias: 'taquito',\n\tschema: '1.0',\n\tversion: '0.1',\n\ttasks: [\n\t\tTask.create({\n\t\t\ttask: 'deploy',\n\t\t\tcommand: 'deploy <contract>',\n\t\t\tdescription: 'Deploy a smart contract to a particular environment',\n\t\t\toptions: [\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'alias',\n\t\t\t\t\tdescription: \"Alias used to refer to the deployed contract's address\",\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'storage',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Name of the storage file that contains the storage value as a Michelson expression, in the artifacts directory, used for originating a contract',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'sender',\n\t\t\t\t\tdescription: 'Name of an instantiated account to use as the sender of the originate operation',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'mutez',\n\t\t\t\t\tdescription: 'Amount of Mutez to transfer',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t],\n\t\t\taliases: ['originate'],\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'transfer',\n\t\t\tcommand: 'transfer <contract>',\n\t\t\tdescription:\n\t\t\t\t'Transfer/call an implicit account or a smart contract (specified via its alias or address) deployed to a particular environment',\n\t\t\toptions: [\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'mutez',\n\t\t\t\t\tdescription: 'Amount of Mutez to transfer',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'param',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'Name of the parameter file that contains the parameter value as a Michelson expression, in the artifacts directory, used for invoking a deployed contract',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'entrypoint',\n\t\t\t\t\tdescription:\n\t\t\t\t\t\t'You may explicitly specify an entrypoint to make the parameter value shorter, without having to specify a chain of (Left (Right ... 14 ...))',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t\tOption.create({\n\t\t\t\t\tflag: 'sender',\n\t\t\t\t\tdescription: 'Name of an instantiated account to use as the sender of the transfer operation',\n\t\t\t\t\trequired: false,\n\t\t\t\t}),\n\t\t\t],\n\t\t\taliases: ['call'],\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'fund',\n\t\t\tcommand: 'fund',\n\t\t\tdescription: 'Fund all the instantiated accounts up to the desired/declared amount in a target environment',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t\tTask.create({\n\t\t\ttask: 'instantiate-account',\n\t\t\tcommand: 'instantiate-account',\n\t\t\tdescription:\n\t\t\t\t'Instantiate all accounts declared in the \"accounts\" field at the root level of the config file to a target environment',\n\t\t\thandler: 'proxy',\n\t\t\tencoding: 'application/json',\n\t\t}),\n\t],\n\tproxy: main,\n}), process.argv);\n","import { sendAsyncErr } from '@taqueria/node-sdk';\nimport { IntersectionOpts as Opts } from './common';\nimport fund from './fund';\nimport instantiate_account from './instantiate_account';\nimport originate from './originate';\nimport transfer from './transfer';\n\nexport const main = (parsedArgs: Opts): Promise<void> => {\n\tswitch (parsedArgs.task) {\n\t\tcase 'deploy':\n\t\t\treturn originate(parsedArgs);\n\t\tcase 'transfer':\n\t\t\treturn transfer(parsedArgs);\n\t\tcase 'instantiate-account':\n\t\t\treturn instantiate_account(parsedArgs);\n\t\tcase 'fund':\n\t\t\treturn fund(parsedArgs);\n\t\tdefault:\n\t\t\treturn sendAsyncErr(`${parsedArgs.task} is not an understood task by the Taquito plugin`);\n\t}\n};\n\nexport default main;\n","import {\n\tgetCurrentEnvironment,\n\tgetCurrentEnvironmentConfig,\n\tsendAsyncErr,\n\tsendJsonRes,\n\tsendWarn,\n} from '@taqueria/node-sdk';\nimport { TezosToolkit } from '@taquito/taquito';\nimport {\n\tconfigureToolKitForNetwork,\n\tFundOpts as Opts,\n\tgetDeclaredAccounts,\n\tgetEnvTypeAndNodeConfig,\n\tgetNetworkInstantiatedAccounts,\n} from './common';\nimport { ContractInfo, performTransferOps } from './transfer';\n\ntype TableRow = {\n\taccountAlias: string;\n\taccountAddress: string;\n\tmutezFunded: string;\n};\n\nconst getAccountsInfo = (\n\tparsedArgs: Opts,\n\ttezos: TezosToolkit,\n\tinstantiatedAccounts: Record<string, any>,\n): Promise<ContractInfo[]> =>\n\tPromise.all(\n\t\tObject.entries(instantiatedAccounts)\n\t\t\t.map(async (instantiatedAccount: [string, any]) => {\n\t\t\t\tconst alias = instantiatedAccount[0];\n\t\t\t\tconst aliasInfo = instantiatedAccount[1];\n\n\t\t\t\tconst declaredMutez: number | undefined = getDeclaredAccounts(parsedArgs)[alias];\n\t\t\t\tconst currentBalanceInMutez = (await tezos.tz.getBalance(aliasInfo.publicKeyHash)).toNumber();\n\t\t\t\tconst amountToFillInMutez = declaredMutez ? Math.max(declaredMutez - currentBalanceInMutez, 0) : 0;\n\n\t\t\t\tif (!declaredMutez) {\n\t\t\t\t\tsendWarn(\n\t\t\t\t\t\t`Warning: ${alias} is instantiated in the target environment but not declared in the root level \"accounts\" field of ./.taq/config.json so ${alias} will not be funded as you don't have a declared tez amount set there for ${alias}\\n`,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\treturn {\n\t\t\t\t\tcontractAlias: alias,\n\t\t\t\t\tcontractAddress: aliasInfo.publicKeyHash,\n\t\t\t\t\tparameter: 'Unit',\n\t\t\t\t\tentrypoint: 'default',\n\t\t\t\t\tmutezTransfer: parseInt(amountToFillInMutez.toString()),\n\t\t\t\t};\n\t\t\t}),\n\t)\n\t\t.then(accountsInfo => accountsInfo.filter(accountInfo => accountInfo.mutezTransfer !== 0))\n\t\t.catch(err => sendAsyncErr(`Something went wrong while extracting account information - ${err}`));\n\nconst prepAccountsInfoForDisplay = (accountsInfo: ContractInfo[]): TableRow[] =>\n\taccountsInfo.map(accountInfo => {\n\t\treturn {\n\t\t\taccountAlias: accountInfo.contractAlias,\n\t\t\taccountAddress: accountInfo.contractAddress,\n\t\t\tmutezFunded: accountInfo.mutezTransfer.toString(),\n\t\t};\n\t});\n\nconst fund = async (parsedArgs: Opts): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\ttry {\n\t\tconst [envType, nodeConfig] = await getEnvTypeAndNodeConfig(parsedArgs, env);\n\t\tif (envType !== 'Network') return sendAsyncErr('taq fund can only be executed in a network environment');\n\t\tconst tezos = await configureToolKitForNetwork(parsedArgs, nodeConfig);\n\n\t\tconst instantiatedAccounts = getNetworkInstantiatedAccounts(nodeConfig);\n\n\t\tconst accountsInfo = await getAccountsInfo(parsedArgs, tezos, instantiatedAccounts);\n\t\tif (accountsInfo.length === 0) {\n\t\t\treturn sendJsonRes(\n\t\t\t\t`All instantiated accounts in the current environment, \"${parsedArgs.env}\", are funded up to or beyond the declared amount`,\n\t\t\t);\n\t\t}\n\n\t\tawait performTransferOps(tezos, getCurrentEnvironment(parsedArgs), accountsInfo);\n\n\t\tconst accountsInfoForDisplay = prepAccountsInfoForDisplay(accountsInfo);\n\t\treturn sendJsonRes(accountsInfoForDisplay);\n\t} catch {\n\t\treturn sendAsyncErr('No operations performed');\n\t}\n};\n\nexport default fund;\n","import {\n\tgetAccountPrivateKey,\n\tgetDefaultSandboxAccount,\n\tgetNetworkConfig,\n\tgetSandboxConfig,\n\tsendAsyncErr,\n\tTAQ_OPERATOR_ACCOUNT,\n} from '@taqueria/node-sdk';\nimport { Environment, NetworkConfig, RequestArgs, SandboxAccountConfig, SandboxConfig } from '@taqueria/node-sdk/types';\nimport { importKey, InMemorySigner } from '@taquito/signer';\nimport { TezosToolkit } from '@taquito/taquito';\n\nexport interface OriginateOpts extends RequestArgs.ProxyRequestArgs {\n\tcontract: string;\n\tstorage: string;\n\talias?: string;\n\tsender?: string;\n\tmutez?: string;\n}\n\nexport interface TransferOpts extends RequestArgs.ProxyRequestArgs {\n\tcontract: string;\n\tmutez?: string;\n\tparam?: string;\n\tentrypoint?: string;\n\tsender?: string;\n}\n\nexport interface InstantiateAccountOpts extends RequestArgs.ProxyRequestArgs {\n}\n\nexport interface FundOpts extends RequestArgs.ProxyRequestArgs {\n}\n\n// To be used for the main entrypoint of the plugin\nexport type IntersectionOpts = OriginateOpts & TransferOpts & InstantiateAccountOpts & FundOpts;\n\n// To be used for common functions in this file\ntype UnionOpts = OriginateOpts | TransferOpts | InstantiateAccountOpts | FundOpts;\n\nexport const getEnvTypeAndNodeConfig = (\n\tparsedArgs: UnionOpts,\n\tenv: Environment.t,\n): Promise<['Network', NetworkConfig.t] | ['Sandbox', SandboxConfig.t]> => {\n\tconst targetConstraintErrMsg = 'Each environment can only have one target, be it a network or a sandbox';\n\tif (env.networks?.length === 1 && env.sandboxes?.length === 1) return sendAsyncErr(targetConstraintErrMsg);\n\tif (env.networks?.length === 1) {\n\t\tconst networkName = env.networks[0];\n\t\tconst network = getNetworkConfig(parsedArgs)(networkName);\n\t\tif (!network) {\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`The current environment is configured to use a network called '${networkName}'; however, no network of this name has been configured in .taq/config.json`,\n\t\t\t);\n\t\t}\n\t\treturn Promise.resolve(['Network', network]);\n\t}\n\tif (env.sandboxes?.length === 1) {\n\t\tconst sandboxName = env.sandboxes[0];\n\t\tconst sandbox = getSandboxConfig(parsedArgs)(sandboxName);\n\t\tif (!sandbox) {\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`The current environment is configured to use a sandbox called '${sandboxName}'; however, no sandbox of this name has been configured in .taq/config.json`,\n\t\t\t);\n\t\t}\n\t\treturn Promise.resolve(['Sandbox', sandbox]);\n\t}\n\treturn sendAsyncErr(targetConstraintErrMsg);\n};\n\nexport const configureToolKitForSandbox = async (sandbox: SandboxConfig.t, sender?: string): Promise<TezosToolkit> => {\n\tlet accountKey: string;\n\tif (sender && sender !== 'default') {\n\t\tconst accounts = getSandboxInstantiatedAccounts(sandbox);\n\t\tif (accounts.hasOwnProperty(sender)) {\n\t\t\taccountKey = accounts[sender].secretKey;\n\t\t} else {\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`${sender} is not an account instantiated in the current environment. Check .taq/config.json`,\n\t\t\t);\n\t\t}\n\t} else {\n\t\tconst defaultAccount = getDefaultSandboxAccount(sandbox);\n\t\tif (!defaultAccount) {\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`No default account is specified in the sandbox to perform the operation. Please use the --sender flag to explicitly specify the account to use as the sender of the operation`,\n\t\t\t);\n\t\t}\n\t\taccountKey = defaultAccount.secretKey;\n\t}\n\n\tconst tezos = new TezosToolkit(sandbox.rpcUrl as string);\n\ttezos.setProvider({ signer: new InMemorySigner(accountKey.replace(/^unencrypted:/, '')) });\n\treturn tezos;\n};\n\nexport const configureToolKitForNetwork = async (\n\tparsedArgs: UnionOpts,\n\tnetwork: NetworkConfig.t,\n\tsender?: string,\n): Promise<TezosToolkit> => {\n\tlet account: string;\n\tif (sender && sender !== TAQ_OPERATOR_ACCOUNT) {\n\t\tconst accounts = getNetworkInstantiatedAccounts(network);\n\t\tif (accounts.hasOwnProperty(sender)) {\n\t\t\taccount = sender;\n\t\t} else {\n\t\t\treturn sendAsyncErr(\n\t\t\t\t`${sender} is not an account instantiated in the current environment. Check .taq/config.json`,\n\t\t\t);\n\t\t}\n\t} else {\n\t\taccount = TAQ_OPERATOR_ACCOUNT;\n\t}\n\n\tconst tezos = new TezosToolkit(network.rpcUrl as string);\n\tconst key = await getAccountPrivateKey(parsedArgs, network, account);\n\tawait importKey(tezos, key);\n\treturn tezos;\n};\n\nexport const getDeclaredAccounts = (parsedArgs: UnionOpts): Record<string, number> =>\n\tObject.entries(parsedArgs.config.accounts).reduce(\n\t\t(acc, declaredAccount) => {\n\t\t\tconst alias: string = declaredAccount[0];\n\t\t\tconst mutez: string | number = declaredAccount[1];\n\t\t\treturn {\n\t\t\t\t...acc,\n\t\t\t\t[alias]: typeof mutez === 'string' ? parseFloat(mutez) : mutez,\n\t\t\t};\n\t\t},\n\t\t{} as Record<string, number>,\n\t);\n\nexport const getSandboxInstantiatedAccounts = (sandbox: SandboxConfig.t): Record<string, SandboxAccountConfig.t> =>\n\t(sandbox?.accounts)\n\t\t? Object.entries(sandbox.accounts).reduce(\n\t\t\t(acc, instantiatedAccount) => {\n\t\t\t\tconst alias: string = instantiatedAccount[0];\n\t\t\t\tconst keys = instantiatedAccount[1];\n\t\t\t\treturn alias !== 'default'\n\t\t\t\t\t? {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[alias]: keys,\n\t\t\t\t\t}\n\t\t\t\t\t: acc;\n\t\t\t},\n\t\t\t{},\n\t\t)\n\t\t: {};\n\nexport const getNetworkInstantiatedAccounts = (network: NetworkConfig.t): Record<string, any> =>\n\tnetwork.accounts\n\t\t? Object.entries(network.accounts).reduce(\n\t\t\t(acc, instantiatedAccount) => {\n\t\t\t\tconst alias: string = instantiatedAccount[0];\n\t\t\t\tconst keys = instantiatedAccount[1];\n\t\t\t\treturn alias !== TAQ_OPERATOR_ACCOUNT\n\t\t\t\t\t? {\n\t\t\t\t\t\t...acc,\n\t\t\t\t\t\t[alias]: keys,\n\t\t\t\t\t}\n\t\t\t\t\t: acc;\n\t\t\t},\n\t\t\t{},\n\t\t)\n\t\t: {};\n\nexport const generateAccountKeys = async (\n\tparsedArgs: UnionOpts,\n\tnetwork: NetworkConfig.t,\n\taccount: string,\n): Promise<void> => {\n\tconst tezos = new TezosToolkit(network.rpcUrl as string);\n\tconst key = await getAccountPrivateKey(parsedArgs, network, account);\n\tawait importKey(tezos, key);\n};\n\nexport const handleOpsError = (err: unknown, env: string): Promise<never> => {\n\tif (err instanceof Error) {\n\t\tconst msg = err.message;\n\t\tif (/ENOTFOUND/.test(msg)) return sendAsyncErr('The RPC URL may be invalid. Check ./.taq/config.json');\n\t\tif (/ECONNREFUSED/.test(msg)) return sendAsyncErr('The RPC URL may be down or the sandbox is not running');\n\t\tif (/empty_implicit_contract/.test(msg)) {\n\t\t\tconst result = msg.match(/(?<=\"implicit\":\")tz[^\"]+(?=\")/);\n\t\t\tconst publicKeyHash = result ? result[0] : undefined;\n\t\t\tif (publicKeyHash) {\n\t\t\t\treturn sendAsyncErr(\n\t\t\t\t\t`The account ${publicKeyHash} for the target environment, \"${env}\", may not be funded\\nTo fund this account:\\n1. Go to https://teztnets.xyz and click \"Faucet\" of the target testnet\\n2. Copy and paste the above key into the wallet address field\\n3. Request some Tez (Note that you might need to wait for a few seconds for the network to register the funds)`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\t}\n\treturn sendAsyncErr(`Error while performing operation:\\n${err} ${JSON.stringify(err, null, 2)}`);\n};\n","import {\n\tgetAddressOfAlias,\n\tgetCurrentEnvironment,\n\tgetCurrentEnvironmentConfig,\n\tgetParameter,\n\tsendAsyncErr,\n\tsendJsonRes,\n} from '@taqueria/node-sdk';\nimport { Environment } from '@taqueria/node-sdk/types';\nimport { Expr, Parser } from '@taquito/michel-codec';\nimport { TezosToolkit, WalletOperationBatch } from '@taquito/taquito';\nimport { BatchWalletOperation } from '@taquito/taquito/dist/types/wallet/batch-operation';\nimport {\n\tconfigureToolKitForNetwork,\n\tconfigureToolKitForSandbox,\n\tgetEnvTypeAndNodeConfig,\n\thandleOpsError,\n\tTransferOpts as Opts,\n} from './common';\n\nexport type ContractInfo = {\n\tcontractAlias: string;\n\tcontractAddress: string;\n\tparameter: string;\n\tentrypoint: string;\n\tmutezTransfer: number;\n};\n\ntype TableRow = {\n\tcontractAlias: string;\n\tcontractAddress: string;\n\tparameter: string;\n\tentrypoint: string;\n\tmutezTransfer: string;\n\tdestination: string;\n};\n\nconst isContractAddress = (contract: string): boolean =>\n\tcontract.startsWith('tz1') || contract.startsWith('tz2') || contract.startsWith('tz3') || contract.startsWith('KT1');\n\nconst getContractInfo = async (parsedArgs: Opts, env: Environment.t): Promise<ContractInfo> => {\n\tconst contract = parsedArgs.contract;\n\treturn {\n\t\tcontractAlias: isContractAddress(contract) ? 'N/A' : contract,\n\t\tcontractAddress: isContractAddress(contract) ? contract : await getAddressOfAlias(env, contract),\n\t\tparameter: parsedArgs.param ? await getParameter(parsedArgs, parsedArgs.param) : 'Unit',\n\t\tentrypoint: parsedArgs.entrypoint ?? 'default',\n\t\tmutezTransfer: parseInt(parsedArgs.mutez ?? '0'),\n\t};\n};\n\nconst createBatchForTransfer = (tezos: TezosToolkit, contractsInfo: ContractInfo[]): WalletOperationBatch =>\n\tcontractsInfo.reduce((acc, contractInfo) =>\n\t\tacc.withTransfer({\n\t\t\tto: contractInfo.contractAddress,\n\t\t\tamount: contractInfo.mutezTransfer,\n\t\t\tparameter: {\n\t\t\t\tentrypoint: contractInfo.entrypoint,\n\t\t\t\tvalue: new Parser().parseMichelineExpression(contractInfo.parameter) as Expr,\n\t\t\t},\n\t\t\tmutez: true,\n\t\t}), tezos.wallet.batch());\n\nexport const performTransferOps = async (\n\ttezos: TezosToolkit,\n\tenv: string,\n\tcontractsInfo: ContractInfo[],\n): Promise<BatchWalletOperation> => {\n\tconst batch = createBatchForTransfer(tezos, contractsInfo);\n\ttry {\n\t\tconst op = await batch.send();\n\t\tawait op.confirmation();\n\t\treturn op;\n\t} catch (err) {\n\t\treturn handleOpsError(err, env);\n\t}\n};\n\nconst prepContractInfoForDisplay = (tezos: TezosToolkit, contractInfo: ContractInfo): TableRow => {\n\treturn {\n\t\tcontractAlias: contractInfo.contractAlias,\n\t\tcontractAddress: contractInfo.contractAddress,\n\t\tparameter: contractInfo.parameter,\n\t\tentrypoint: contractInfo.entrypoint,\n\t\tmutezTransfer: contractInfo.mutezTransfer.toString(),\n\t\tdestination: tezos.rpc.getRpcUrl(),\n\t};\n};\n\nconst transfer = async (parsedArgs: Opts): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\ttry {\n\t\tconst [envType, nodeConfig] = await getEnvTypeAndNodeConfig(parsedArgs, env);\n\t\tconst tezos = await (envType === 'Network'\n\t\t\t? configureToolKitForNetwork(parsedArgs, nodeConfig, parsedArgs.sender)\n\t\t\t: configureToolKitForSandbox(nodeConfig, parsedArgs.sender));\n\n\t\tconst contractInfo = await getContractInfo(parsedArgs, env);\n\n\t\tawait performTransferOps(tezos, getCurrentEnvironment(parsedArgs), [contractInfo]);\n\n\t\tconst contractInfoForDisplay = prepContractInfoForDisplay(tezos, contractInfo);\n\t\treturn sendJsonRes([contractInfoForDisplay]);\n\t} catch {\n\t\treturn sendAsyncErr('No operations performed');\n\t}\n};\n\nexport default transfer;\n","import { getCurrentEnvironmentConfig, sendAsyncErr, sendJsonRes, sendWarn } from '@taqueria/node-sdk';\nimport {\n\tgenerateAccountKeys,\n\tgetDeclaredAccounts,\n\tgetEnvTypeAndNodeConfig,\n\tgetNetworkInstantiatedAccounts,\n\tInstantiateAccountOpts as Opts,\n} from './common';\n\nconst instantiate_account = async (parsedArgs: Opts): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\ttry {\n\t\tconst [envType, nodeConfig] = await getEnvTypeAndNodeConfig(parsedArgs, env);\n\t\tif (envType !== 'Network') {\n\t\t\treturn sendAsyncErr('taq instantiate-account can only be executed in a network environment');\n\t\t}\n\n\t\tconst declaredAccountAliases = Object.keys(getDeclaredAccounts(parsedArgs));\n\t\tconst instantiatedAccounts = getNetworkInstantiatedAccounts(nodeConfig);\n\n\t\tlet accountsInstantiated = [];\n\t\tfor (const declaredAccountAlias of declaredAccountAliases) {\n\t\t\tif (!instantiatedAccounts.hasOwnProperty(declaredAccountAlias)) {\n\t\t\t\tawait generateAccountKeys(parsedArgs, nodeConfig, declaredAccountAlias);\n\t\t\t\taccountsInstantiated.push(declaredAccountAlias);\n\t\t\t} else {\n\t\t\t\tsendWarn(\n\t\t\t\t\t`Note: ${declaredAccountAlias} is already instantiated in the current environment, \"${parsedArgs.env}\"`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tif (accountsInstantiated.length !== 0) {\n\t\t\treturn sendJsonRes(\n\t\t\t\t`Accounts instantiated: ${\n\t\t\t\t\taccountsInstantiated.join(', ')\n\t\t\t\t}.\\nPlease execute \"taq fund\" targeting the same environment to fund these accounts`,\n\t\t\t);\n\t\t} else {\n\t\t\treturn sendJsonRes(\n\t\t\t\t`No accounts were instantiated because they were all instantiated in the target environment already`,\n\t\t\t);\n\t\t}\n\t} catch {\n\t\treturn sendAsyncErr('No operations performed');\n\t}\n};\n\nexport default instantiate_account;\n","import {\n\taddTzExtensionIfMissing,\n\tgetContractContent,\n\tgetCurrentEnvironment,\n\tgetCurrentEnvironmentConfig,\n\tsendAsyncErr,\n\tsendErr,\n\tsendJsonRes,\n\tupdateAddressAlias,\n} from '@taqueria/node-sdk';\nimport { OperationContentsAndResultOrigination } from '@taquito/rpc';\nimport { TezosToolkit, WalletOperationBatch } from '@taquito/taquito';\nimport { BatchWalletOperation } from '@taquito/taquito/dist/types/wallet/batch-operation';\nimport { readFile } from 'fs/promises';\nimport { basename, extname, join } from 'path';\nimport {\n\tconfigureToolKitForNetwork,\n\tconfigureToolKitForSandbox,\n\tgetEnvTypeAndNodeConfig,\n\thandleOpsError,\n\tOriginateOpts as Opts,\n} from './common';\n\ntype ContractInfo = {\n\tcontract: string;\n\tcode: string;\n\tinitStorage: string;\n\tmutezTransfer: number;\n};\n\ntype TableRow = {\n\tcontract: string;\n\taddress: string;\n\talias: string;\n\tbalanceInMutez: string;\n\tdestination: string;\n};\n\nconst getContractPath = (parsedArgs: Opts, contractFilename: string) =>\n\tjoin(parsedArgs.config.artifactsDir, /\\.tz$/.test(contractFilename) ? contractFilename : `${contractFilename}.tz`);\n\nconst getDefaultStorageFilename = (contractName: string): string => {\n\tconst baseFilename = basename(contractName, extname(contractName));\n\tconst extFilename = extname(contractName);\n\tconst defaultStorage = `${baseFilename}.default_storage${extFilename}`;\n\treturn defaultStorage;\n};\n\nconst getContractInfo = async (parsedArgs: Opts): Promise<ContractInfo> => {\n\tconst contract = parsedArgs.contract;\n\tconst contractWithTzExtension = addTzExtensionIfMissing(contract);\n\tconst contractCode = await getContractContent(parsedArgs, contractWithTzExtension);\n\tif (contractCode === undefined) {\n\t\treturn sendAsyncErr(\n\t\t\t`Please generate ${contractWithTzExtension} with one of the compilers (LIGO, SmartPy, Archetype) or write it manually and put it under /${parsedArgs.config.artifactsDir}\\n`,\n\t\t);\n\t}\n\n\tconst storageFilename = parsedArgs.storage ?? getDefaultStorageFilename(contractWithTzExtension);\n\tconst contractInitStorage = await getContractContent(parsedArgs, storageFilename);\n\tif (contractInitStorage === undefined) {\n\t\treturn sendAsyncErr(\n\t\t\t`❌ No initial storage file was found for ${contractWithTzExtension}\\nStorage must be specified in a file as a Michelson expression and will automatically be linked to this contract if specified with the name \"${\n\t\t\t\tgetDefaultStorageFilename(contractWithTzExtension)\n\t\t\t}\" in the artifacts directory\\nYou can also manually pass a storage file to the originate task using the --storage STORAGE_FILE_NAME option\\n`,\n\t\t);\n\t}\n\n\treturn {\n\t\tcontract,\n\t\tcode: contractCode,\n\t\tinitStorage: contractInitStorage,\n\t\tmutezTransfer: parseInt(parsedArgs.mutez ?? '0'),\n\t};\n};\n\nconst createBatchForOriginate = (tezos: TezosToolkit, contractsInfo: ContractInfo[]): WalletOperationBatch =>\n\tcontractsInfo.reduce((acc, contractInfo) =>\n\t\tacc.withOrigination({\n\t\t\tcode: contractInfo.code,\n\t\t\tinit: contractInfo.initStorage,\n\t\t\tbalance: contractInfo.mutezTransfer.toString(),\n\t\t\tmutez: true,\n\t\t}), tezos.wallet.batch());\n\nexport const performOriginateOps = async (\n\ttezos: TezosToolkit,\n\tenv: string,\n\tcontractsInfo: ContractInfo[],\n): Promise<BatchWalletOperation> => {\n\tconst batch = createBatchForOriginate(tezos, contractsInfo);\n\ttry {\n\t\tconst op = await batch.send();\n\t\tawait op.confirmation();\n\t\treturn op;\n\t} catch (err) {\n\t\treturn handleOpsError(err, env);\n\t}\n};\n\nconst prepContractInfoForDisplay = async (\n\tparsedArgs: Opts,\n\ttezos: TezosToolkit,\n\tcontractInfo: ContractInfo,\n\top: BatchWalletOperation,\n): Promise<TableRow> => {\n\tconst operationResults = await op.operationResults();\n\tconst originationResults = operationResults\n\t\t.filter(result => result.kind === 'origination')\n\t\t.map(result => result as OperationContentsAndResultOrigination);\n\n\t// Length should be 1 since we are batching originate operations into one\n\tconst result = originationResults.length === 1 ? originationResults[0] : undefined;\n\tconst address = result?.metadata?.operation_result?.originated_contracts?.join(',');\n\n\tconst alias = parsedArgs.alias ?? basename(contractInfo.contract, extname(contractInfo.contract));\n\tif (address) await updateAddressAlias(parsedArgs, alias, address);\n\n\treturn {\n\t\tcontract: contractInfo.contract,\n\t\taddress: address ?? 'Something went wrong during origination',\n\t\talias: address ? alias : 'N/A',\n\t\tbalanceInMutez: contractInfo.mutezTransfer.toString(),\n\t\tdestination: tezos.rpc.getRpcUrl(),\n\t};\n};\n\nconst originate = async (parsedArgs: Opts): Promise<void> => {\n\tconst env = getCurrentEnvironmentConfig(parsedArgs);\n\tif (!env) return sendAsyncErr(`There is no environment called ${parsedArgs.env} in your config.json`);\n\ttry {\n\t\tconst [envType, nodeConfig] = await getEnvTypeAndNodeConfig(parsedArgs, env);\n\t\tconst tezos = await (envType === 'Network'\n\t\t\t? configureToolKitForNetwork(parsedArgs, nodeConfig, parsedArgs.sender)\n\t\t\t: configureToolKitForSandbox(nodeConfig, parsedArgs.sender));\n\n\t\tconst contractInfo = await getContractInfo(parsedArgs);\n\n\t\tconst op = await performOriginateOps(tezos, getCurrentEnvironment(parsedArgs), [contractInfo]);\n\n\t\tconst contractInfoForDisplay = await prepContractInfoForDisplay(parsedArgs, tezos, contractInfo, op);\n\t\treturn sendJsonRes([contractInfoForDisplay]);\n\t} catch {\n\t\treturn sendAsyncErr('No operations performed');\n\t}\n};\n\nexport default originate;\n"],"names":[],"version":3,"file":"index.js.map","sourceRoot":"../"}