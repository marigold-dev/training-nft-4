#import "@ligo/fa/lib/fa2/asset/multi_asset.jsligo" "MULTIASSET"
/* ERROR MAP FOR UI DISPLAY or TESTS
    const errorMap : map<string,string> = Map.literal(list([
      ["0", "Enter a positive and not null amount"],
      ["1", "Operation not allowed, you need to be administrator"],
      ["2", "You cannot sell more than your current balance"],
      ["3", "Cannot find the offer you entered for buying"],
      ["4", "You entered a quantity to buy than is more than the offer quantity"],
      ["5", "Not enough funds, you need to pay at least quantity * offer price to get the tokens"],
      ["6", "Cannot find the contract relative to implicit address"],
    ]));
*/

type offer = {
  quantity: nat,
  price: nat
};

type storage = {
  administrators: set<address>,
  offers: map<[address, nat], offer>, //user sells an offer for a token_id
  ledger: MULTIASSET.Ledger.t,
  metadata: MULTIASSET.Metadata.t,
  token_metadata: MULTIASSET.TokenMetadata.t,
  operators: MULTIASSET.Operators.t,
  owner_token_ids: set<[MULTIASSET.owner, MULTIASSET.token_id]>,
  token_ids: set<MULTIASSET.token_id>
};

type ret = [list<operation>, storage];

@entry
const transfer = (p: MULTIASSET.transfer, s: storage): ret => {
  const ret2: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.transfer(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      owner_token_ids: ret2[1].owner_token_ids,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const balance_of = (p: MULTIASSET.balance_of, s: storage): ret => {
  const ret2: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.balance_of(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      owner_token_ids: ret2[1].owner_token_ids,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const update_operators = (p: MULTIASSET.update_operators, s: storage): ret => {
  const ret2: [list<operation>, MULTIASSET.storage] =
    MULTIASSET.update_ops(
      [
        p,
        {
          ledger: s.ledger,
          metadata: s.metadata,
          token_metadata: s.token_metadata,
          operators: s.operators,
          owner_token_ids: s.owner_token_ids,
          token_ids: s.token_ids
        }
      ]
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
      owner_token_ids: ret2[1].owner_token_ids,
      token_ids: ret2[1].token_ids
    }
  ]
};

@entry
const mint = (
  [token_id, quantity, name, description, symbol, ipfsUrl]
    : [nat, nat, bytes, bytes, bytes, bytes],
  s: storage
): ret => {
  if (quantity <= (0 as nat)) return failwith("0");
  if (!Set.mem(Tezos.get_sender(), s.administrators)) return failwith("1");
  const token_info: map<string, bytes> =
    Map.literal(
      list(
        [
          ["name", name],
          ["description", description],
          ["interfaces", (bytes `["TZIP-12"]`)],
          ["thumbnailUri", ipfsUrl],
          ["symbol", symbol],
          ["decimals", (bytes `0`)]
        ]
      )
    ) as map<string, bytes>;
  return [
    list([]) as list<operation>,
    {
      ...s,
      ledger: Big_map.add(
        [Tezos.get_sender(), token_id],
        quantity as nat,
        s.ledger
      ) as MULTIASSET.Ledger.t,
      token_metadata: Big_map.add(
        token_id,
        { token_id: token_id, token_info: token_info },
        s.token_metadata
      ),
      operators: Big_map.empty as MULTIASSET.Operators.t,
      owner_token_ids: Set.add(
        [Tezos.get_sender(), token_id],
        s.owner_token_ids
      ),
      token_ids: Set.add(token_id, s.token_ids)
    }
  ]
};

@entry
const sell = ([token_id, quantity, price]: [nat, nat, nat], s: storage): ret => {
  //check balance of seller

  const sellerBalance =
    MULTIASSET.Ledger.get_for_user([s.ledger, Tezos.get_source(), token_id]);
  if (quantity > sellerBalance) return failwith("2");
  //need to allow the contract itself to be an operator on behalf of the seller

  const newOperators =
    MULTIASSET.Operators.add_operator(
      [s.operators, Tezos.get_source(), Tezos.get_self_address(), token_id]
    );
  //DECISION CHOICE: if offer already exists, we just override it

  return [
    list([]) as list<operation>,
    {
      ...s,
      offers: Map.add(
        [Tezos.get_source(), token_id],
        { quantity: quantity, price: price },
        s.offers
      ),
      operators: newOperators
    }
  ]
};

@entry
const buy = ([token_id, quantity, seller]: [nat, nat, address], s: storage): ret => {
  //search for the offer

  return match(
    Map.find_opt([seller, token_id], s.offers),
    {
      None: () => failwith("3"),
      Some: (offer: offer) => {
        //check if amount have been paid enough

        if (Tezos.get_amount() < offer.price * (1 as mutez)) return failwith(
          "5"
        );
        // prepare transfer of XTZ to seller

        const op =
          Tezos.transaction(
            unit,
            offer.price * (1 as mutez),
            Tezos.get_contract_with_error(seller, "6")
          );
        //transfer tokens from seller to buyer

        let ledger =
          MULTIASSET.Ledger.decrease_token_amount_for_user(
            [s.ledger, seller, token_id, quantity]
          );
        ledger =
          MULTIASSET.Ledger.increase_token_amount_for_user(
            [ledger, Tezos.get_source(), token_id, quantity]
          );
        //update new offer

        const newOffer = { ...offer, quantity: abs(offer.quantity - quantity) };
        return [
          list([op]) as list<operation>,
          {
            ...s,
            offers: Map.update([seller, token_id], Some(newOffer), s.offers),
            ledger: ledger,
            owner_token_ids: Set.add(
              [Tezos.get_source(), token_id],
              s.owner_token_ids
            )
          }
        ]
      }
    }
  )
};
