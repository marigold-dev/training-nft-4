#import "@ligo/fa/lib/fa2/asset/multi_asset.jsligo" "MULTIASSET"

type offer = {
  quantity : nat,
  price : nat
};

type storage =
  {
    administrators: set<address>,
    offers: map<[address,nat],offer>,  //user sells an offer for a token_id
    ledger: MULTIASSET.Ledger.t,
    metadata: MULTIASSET.Metadata.t,
    token_metadata: MULTIASSET.TokenMetadata.t,
    operators: MULTIASSET.Operators.t,
    owner_token_ids : set<[MULTIASSET.Storage.owner,MULTIASSET.Storage.token_id]>,
    token_ids : set<MULTIASSET.Storage.token_id>
  };

type ret = [list<operation>, storage];

type parameter =
  | ["Mint", nat,nat,bytes,bytes,bytes,bytes] //token_id, quantity, name , description ,symbol , bytesipfsUrl
  | ["AddAdministrator" , address]
  | ["Buy", nat,nat, address]  //buy token_id,quantity at a seller offer price
  | ["Sell", nat,nat, nat]  //sell token_id,quantity at a price
  | ["Transfer", MULTIASSET.transfer]
  | ["Balance_of", MULTIASSET.balance_of]
  | ["Update_operators", MULTIASSET.update_operators];



const mint = (token_id : nat, quantity: nat, name : bytes, description : bytes,symbol : bytes, ipfsUrl: bytes, s: storage) : ret => {

   if(quantity <= (0 as nat)) return failwith("0");

   if(! Set.mem(Tezos.get_sender(), s.administrators)) return failwith("1");

   const token_info: map<string, bytes> =
     Map.literal(list([
      ["name", name],
      ["description",description],
      ["interfaces", (bytes `["TZIP-12"]`)],
      ["thumbnailUri", ipfsUrl],
      ["symbol",symbol],
      ["decimals", (bytes `0`)]
     ])) as map<string, bytes>;


    const metadata : bytes = bytes
  `{
      "name":"FA2 NFT Marketplace",
      "description":"Example of FA2 implementation",
      "version":"0.0.1",
      "license":{"name":"MIT"},
      "authors":["Marigold<contact@marigold.dev>"],
      "homepage":"https://marigold.dev",
      "source":{
        "tools":["Ligo"],
        "location":"https://github.com/ligolang/contract-catalogue/tree/main/lib/fa2"},
      "interfaces":["TZIP-012"],
      "errors": [],
      "views": []
      }` ;

    return [list([]) as list<operation>,
          {...s,
     ledger: Big_map.add([Tezos.get_sender(),token_id],quantity as nat,s.ledger) as MULTIASSET.Ledger.t,
     metadata : Big_map.literal(list([["",  bytes `tezos-storage:data`],["data", metadata]])),
     token_metadata: Big_map.add(token_id, {token_id: token_id,token_info:token_info},s.token_metadata),
     operators: Big_map.empty as MULTIASSET.Operators.t,
     owner_token_ids : Set.add([Tezos.get_sender(),token_id],s.owner_token_ids),
     token_ids: Set.add(token_id, s.token_ids)}]};





const sell = (token_id : nat, quantity: nat, price: nat, s: storage) : ret => {

  //check balance of seller
  const sellerBalance = MULTIASSET.Ledger.get_for_user([s.ledger,Tezos.get_source(),token_id]);
  if(quantity > sellerBalance) return failwith("2");

  //need to allow the contract itself to be an operator on behalf of the seller
  const newOperators = MULTIASSET.Operators.add_operator([s.operators,Tezos.get_source(),Tezos.get_self_address(),token_id]);

  //DECISION CHOICE: if offer already exists, we just override it
  return [list([]) as list<operation>,{...s,offers:Map.add([Tezos.get_source(),token_id],{quantity : quantity, price : price},s.offers),operators:newOperators}];
};




const buy = (token_id : nat, quantity: nat, seller: address, s: storage) : ret => {

  //search for the offer
  return match( Map.find_opt([seller,token_id],s.offers) , {
    None : () => failwith("3"),
    Some : (offer : offer) => {

      //check if amount have been paid enough
      if(Tezos.get_amount() < offer.price  * (1 as mutez)) return failwith("5");

      // prepare transfer of XTZ to seller
      const op = Tezos.transaction(unit,offer.price  * (1 as mutez),Tezos.get_contract_with_error(seller,"6"));

      //transfer tokens from seller to buyer
      let ledger = MULTIASSET.Ledger.decrease_token_amount_for_user([s.ledger,seller,token_id,quantity]);
      ledger = MULTIASSET.Ledger.increase_token_amount_for_user([ledger,Tezos.get_source(),token_id,quantity]);

      //update new offer
      const newOffer = {...offer,quantity : abs(offer.quantity - quantity)};

      return [list([op]) as list<operation>, {...s, offers : Map.update([seller,token_id],Some(newOffer),s.offers), ledger : ledger, owner_token_ids : Set.add([Tezos.get_source(),token_id],s.owner_token_ids) }];
    }
  });
};


const main = ([p, s]: [parameter, storage]): ret =>
  match(
    p,
    {
      Mint: (p: [nat, nat, bytes, bytes, bytes, bytes]) =>
        mint(p[0], p[1], p[2], p[3], p[4], p[5], s),
      AddAdministrator: (p: address) => {
        if (Set.mem(Tezos.get_sender(), s.administrators)) {
          return [
            list([]),
            { ...s, administrators: Set.add(p, s.administrators) }
          ]
        } else {
          return failwith("1")
        }
      },
      Buy: (p: [nat, nat, address]) => buy(p[0], p[1], p[2], s),
      Sell: (p: [nat, nat, nat]) => sell(p[0], p[1], p[2], s),
      Transfer: (p: MULTIASSET.transfer) => {
        const ret2: [list<operation>, MULTIASSET.storage] =
          MULTIASSET.transfer(
            [
              p,
              {
                ledger: s.ledger,
                metadata: s.metadata,
                token_metadata: s.token_metadata,
                operators: s.operators,
                owner_token_ids: s.owner_token_ids,
                token_ids: s.token_ids
              }
            ]
          );
        return [
          ret2[0],
          {
            ...s,
            ledger: ret2[1].ledger,
            metadata: ret2[1].metadata,
            token_metadata: ret2[1].token_metadata,
            operators: ret2[1].operators,
            owner_token_ids: ret2[1].owner_token_ids,
            token_ids: ret2[1].token_ids
          }
        ]
      },
      Balance_of: (p: MULTIASSET.balance_of) => {
        const ret2: [list<operation>, MULTIASSET.storage] =
          MULTIASSET.balance_of(
            [
              p,
              {
                ledger: s.ledger,
                metadata: s.metadata,
                token_metadata: s.token_metadata,
                operators: s.operators,
                owner_token_ids: s.owner_token_ids,
                token_ids: s.token_ids
              }
            ]
          );
        return [
          ret2[0],
          {
            ...s,
            ledger: ret2[1].ledger,
            metadata: ret2[1].metadata,
            token_metadata: ret2[1].token_metadata,
            operators: ret2[1].operators,
            owner_token_ids: ret2[1].owner_token_ids,
            token_ids: ret2[1].token_ids
          }
        ]
      },
      Update_operators: (p: MULTIASSET.update_operators) => {
        const ret2: [list<operation>, MULTIASSET.storage] =
          MULTIASSET.update_ops(
            [
              p,
              {
                ledger: s.ledger,
                metadata: s.metadata,
                token_metadata: s.token_metadata,
                operators: s.operators,
                owner_token_ids: s.owner_token_ids,
                token_ids: s.token_ids
              }
            ]
          );
        return [
          ret2[0],
          {
            ...s,
            ledger: ret2[1].ledger,
            metadata: ret2[1].metadata,
            token_metadata: ret2[1].token_metadata,
            operators: ret2[1].operators,
            owner_token_ids: ret2[1].owner_token_ids,
            token_ids: ret2[1].token_ids
          }
        ]
      }
    }
  );