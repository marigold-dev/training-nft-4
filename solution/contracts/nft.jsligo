#import "@ligo/fa/lib/fa2/asset/multi_asset.impl.jsligo" "FA2Impl"

/* ERROR MAP FOR UI DISPLAY or TESTS
    const errorMap : map<string,string> = Map.literal(list([
      ["0", "Enter a positive and not null amount"],
      ["1", "Operation not allowed, you need to be administrator"],
      ["2", "You cannot sell more than your current balance"],
      ["3", "Cannot find the offer you entered for buying"],
      ["4", "You entered a quantity to buy than is more than the offer quantity"],
      ["5", "Not enough funds, you need to pay at least quantity * offer price to get the tokens"],
      ["6", "Cannot find the contract relative to implicit address"],
    ]));
*/

export type offer = { quantity: nat, price: nat };

export type storage = {
  administrators: set<address>,
  offers: map<[address, nat], offer>, //user sells an offer for a token_id

  ledger: FA2Impl.Datatypes.ledger,
  metadata: FA2Impl.TZIP16.metadata,
  token_metadata: FA2Impl.TZIP12.tokenMetadata,
  operators: FA2Impl.Datatypes.operators,
};

type ret = [list<operation>, storage];

@entry
const transfer = (p: FA2Impl.TZIP12.transfer, s: storage): ret => {
  const ret2: [list<operation>, FA2Impl.MultiAsset.storage] =
    FA2Impl.MultiAsset.transfer(
      p,
      {
        ledger: s.ledger,
        metadata: s.metadata,
        token_metadata: s.token_metadata,
        operators: s.operators,
      }
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const balance_of = (p: FA2Impl.TZIP12.balance_of, s: storage): ret => {
  const ret2: [list<operation>, FA2Impl.MultiAsset.storage] =
    FA2Impl.MultiAsset.balance_of(
      p,
      {
        ledger: s.ledger,
        metadata: s.metadata,
        token_metadata: s.token_metadata,
        operators: s.operators,
      }
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const update_operators = (p: FA2Impl.TZIP12.update_operators, s: storage): ret => {
  const ret2: [list<operation>, FA2Impl.MultiAsset.storage] =
    FA2Impl.MultiAsset.update_operators(
      p,
      {
        ledger: s.ledger,
        metadata: s.metadata,
        token_metadata: s.token_metadata,
        operators: s.operators,
      }
    );
  return [
    ret2[0],
    {
      ...s,
      ledger: ret2[1].ledger,
      metadata: ret2[1].metadata,
      token_metadata: ret2[1].token_metadata,
      operators: ret2[1].operators,
    }
  ]
};

@entry
const mint = (
  [token_id, quantity, name, description, symbol, ipfsUrl]: [
    nat,
    nat,
    bytes,
    bytes,
    bytes,
    bytes
  ],
  s: storage
): ret => {
  if (quantity <= (0 as nat)) return failwith("0");
  if (! Set.mem(Tezos.get_sender(), s.administrators)) return failwith("1");
  const token_info: map<string, bytes> =
    Map.literal(
      list(
        [
          ["name", name],
          ["description", description],
          ["interfaces", (bytes `["TZIP-12"]`)],
          ["thumbnailUri", ipfsUrl],
          ["symbol", symbol],
          ["decimals", (bytes `0`)]
        ]
      )
    ) as map<string, bytes>;
  return [
    list([]) as list<operation>,
    {
      ...s,
      ledger: Big_map.add(
        [Tezos.get_sender(), token_id],
        quantity as nat,
        s.ledger
      ) as FA2Impl.Datatypes.ledger,
      token_metadata: Big_map.add(
        token_id,
        { token_id: token_id, token_info: token_info },
        s.token_metadata
      ),
      operators: Big_map.empty as FA2Impl.Datatypes.operators
    }
  ]
};

@entry
const sell = ([token_id, quantity, price]: [nat, nat, nat], s: storage): ret => {
  //check balance of seller

  const sellerBalance =
    FA2Impl.Sidecar.get_for_user([s.ledger, Tezos.get_source(), token_id]);
  if (quantity > sellerBalance) return failwith("2");
  //need to allow the contract itself to be an operator on behalf of the seller

  const newOperators =
    FA2Impl.Sidecar.add_operator(
      [s.operators, Tezos.get_source(), Tezos.get_self_address(), token_id]
    );
  //DECISION CHOICE: if offer already exists, we just override it

  return [
    list([]) as list<operation>,
    {
      ...s,
      offers: Map.add(
        [Tezos.get_source(), token_id],
        { quantity: quantity, price: price },
        s.offers
      ),
      operators: newOperators
    }
  ]
};

@entry
const buy = ([token_id, quantity, seller]: [nat, nat, address], s: storage): ret => {
  //search for the offer

  return match(Map.find_opt([seller, token_id], s.offers)) {
    when (None()):
      failwith("3")
    when (Some(offer)):
      do {
        //check if amount have been paid enough

        if (Tezos.get_amount() < offer.price * (1 as mutez)) return failwith(
          "5"
        );
        // prepare transfer of XTZ to seller

        const op =
          Tezos.transaction(
            unit,
            offer.price * (1 as mutez),
            Tezos.get_contract_with_error(seller, "6")
          );
        //transfer tokens from seller to buyer

        let ledger =
          FA2Impl.Sidecar.decrease_token_amount_for_user(
            [s.ledger, seller, token_id, quantity]
          );
        ledger
        = FA2Impl.Sidecar.increase_token_amount_for_user(
            [ledger, Tezos.get_source(), token_id, quantity]
          );
        //update new offer

        const newOffer = { ...offer, quantity: abs(offer.quantity - quantity) };
        return [
          list([op]) as list<operation>,
          {
            ...s,
            offers: Map.update([seller, token_id], Some(newOffer), s.offers),
            ledger: ledger
          }
        ]
      }
  }
};
